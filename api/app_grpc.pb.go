// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	App_CreateLesson_FullMethodName  = "/api.App/CreateLesson"
	App_ListLesson_FullMethodName    = "/api.App/ListLesson"
	App_GetLesson_FullMethodName     = "/api.App/GetLesson"
	App_UpdateLesson_FullMethodName  = "/api.App/UpdateLesson"
	App_DeleteLesson_FullMethodName  = "/api.App/DeleteLesson"
	App_CreateTeacher_FullMethodName = "/api.App/CreateTeacher"
	App_ListTeacher_FullMethodName   = "/api.App/ListTeacher"
	App_GetTeacher_FullMethodName    = "/api.App/GetTeacher"
	App_UpdateTeacher_FullMethodName = "/api.App/UpdateTeacher"
	App_DeleteTeacher_FullMethodName = "/api.App/DeleteTeacher"
)

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLesson(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLessonReply, error)
	GetLesson(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetLessonReply, error)
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLesson(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTeacher(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListTeacherReply, error)
	GetTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetTeacherReply, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_CreateLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) ListLesson(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLessonReply, error) {
	out := new(ListLessonReply)
	err := c.cc.Invoke(ctx, App_ListLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetLesson(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetLessonReply, error) {
	out := new(GetLessonReply)
	err := c.cc.Invoke(ctx, App_GetLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_UpdateLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) DeleteLesson(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_DeleteLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_CreateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) ListTeacher(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListTeacherReply, error) {
	out := new(ListTeacherReply)
	err := c.cc.Invoke(ctx, App_ListTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetTeacherReply, error) {
	out := new(GetTeacherReply)
	err := c.cc.Invoke(ctx, App_GetTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_UpdateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) DeleteTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, App_DeleteTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	CreateLesson(context.Context, *CreateLessonRequest) (*emptypb.Empty, error)
	ListLesson(context.Context, *PageRequest) (*ListLessonReply, error)
	GetLesson(context.Context, *IDRequest) (*GetLessonReply, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*emptypb.Empty, error)
	DeleteLesson(context.Context, *IDRequest) (*emptypb.Empty, error)
	CreateTeacher(context.Context, *CreateTeacherRequest) (*emptypb.Empty, error)
	ListTeacher(context.Context, *PageRequest) (*ListTeacherReply, error)
	GetTeacher(context.Context, *IDRequest) (*GetTeacherReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*emptypb.Empty, error)
	DeleteTeacher(context.Context, *IDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) CreateLesson(context.Context, *CreateLessonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedAppServer) ListLesson(context.Context, *PageRequest) (*ListLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLesson not implemented")
}
func (UnimplementedAppServer) GetLesson(context.Context, *IDRequest) (*GetLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedAppServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedAppServer) DeleteLesson(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedAppServer) CreateTeacher(context.Context, *CreateTeacherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedAppServer) ListTeacher(context.Context, *PageRequest) (*ListTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeacher not implemented")
}
func (UnimplementedAppServer) GetTeacher(context.Context, *IDRequest) (*GetTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacher not implemented")
}
func (UnimplementedAppServer) UpdateTeacher(context.Context, *UpdateTeacherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedAppServer) DeleteTeacher(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacher not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_CreateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_ListLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).ListLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_ListLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).ListLesson(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_GetLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetLesson(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UpdateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_DeleteLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).DeleteLesson(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_CreateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CreateTeacher(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_ListTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).ListTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_ListTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).ListTeacher(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_GetTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTeacher(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UpdateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_DeleteTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).DeleteTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_DeleteTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).DeleteTeacher(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLesson",
			Handler:    _App_CreateLesson_Handler,
		},
		{
			MethodName: "ListLesson",
			Handler:    _App_ListLesson_Handler,
		},
		{
			MethodName: "GetLesson",
			Handler:    _App_GetLesson_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _App_UpdateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _App_DeleteLesson_Handler,
		},
		{
			MethodName: "CreateTeacher",
			Handler:    _App_CreateTeacher_Handler,
		},
		{
			MethodName: "ListTeacher",
			Handler:    _App_ListTeacher_Handler,
		},
		{
			MethodName: "GetTeacher",
			Handler:    _App_GetTeacher_Handler,
		},
		{
			MethodName: "UpdateTeacher",
			Handler:    _App_UpdateTeacher_Handler,
		},
		{
			MethodName: "DeleteTeacher",
			Handler:    _App_DeleteTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
