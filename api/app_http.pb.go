// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.12
// source: app.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppCreateBook = "/api.App/CreateBook"
const OperationAppCreateLesson = "/api.App/CreateLesson"
const OperationAppCreateTeacher = "/api.App/CreateTeacher"
const OperationAppDeleteBook = "/api.App/DeleteBook"
const OperationAppDeleteLesson = "/api.App/DeleteLesson"
const OperationAppDeleteTeacher = "/api.App/DeleteTeacher"
const OperationAppGetBook = "/api.App/GetBook"
const OperationAppGetLesson = "/api.App/GetLesson"
const OperationAppGetTeacher = "/api.App/GetTeacher"
const OperationAppListBook = "/api.App/ListBook"
const OperationAppListLesson = "/api.App/ListLesson"
const OperationAppListTeacher = "/api.App/ListTeacher"
const OperationAppUpdateBook = "/api.App/UpdateBook"
const OperationAppUpdateLesson = "/api.App/UpdateLesson"
const OperationAppUpdateLessonStatus = "/api.App/UpdateLessonStatus"
const OperationAppUpdateTeacher = "/api.App/UpdateTeacher"

type AppHTTPServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*emptypb.Empty, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*emptypb.Empty, error)
	CreateTeacher(context.Context, *CreateTeacherRequest) (*emptypb.Empty, error)
	DeleteBook(context.Context, *IDRequest) (*emptypb.Empty, error)
	DeleteLesson(context.Context, *IDRequest) (*emptypb.Empty, error)
	DeleteTeacher(context.Context, *IDRequest) (*emptypb.Empty, error)
	GetBook(context.Context, *IDRequest) (*GetBookReply, error)
	GetLesson(context.Context, *IDRequest) (*GetLessonReply, error)
	GetTeacher(context.Context, *IDRequest) (*GetTeacherReply, error)
	ListBook(context.Context, *PageRequest) (*ListBookReply, error)
	ListLesson(context.Context, *PageRequest) (*ListLessonReply, error)
	ListTeacher(context.Context, *PageRequest) (*ListTeacherReply, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*emptypb.Empty, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*emptypb.Empty, error)
	UpdateLessonStatus(context.Context, *UpdateLessonRequest) (*emptypb.Empty, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*emptypb.Empty, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/lesson", _App_CreateLesson0_HTTP_Handler(srv))
	r.GET("/v1/lesson", _App_ListLesson0_HTTP_Handler(srv))
	r.GET("/v1/lesson/{id}", _App_GetLesson0_HTTP_Handler(srv))
	r.PUT("/v1/lesson/{id}", _App_UpdateLesson0_HTTP_Handler(srv))
	r.PUT("/v1/lesson/{id}/status", _App_UpdateLessonStatus0_HTTP_Handler(srv))
	r.DELETE("/v1/lesson/{id}", _App_DeleteLesson0_HTTP_Handler(srv))
	r.POST("/v1/teacher", _App_CreateTeacher0_HTTP_Handler(srv))
	r.GET("/v1/teacher", _App_ListTeacher0_HTTP_Handler(srv))
	r.GET("/v1/teacher/{id}", _App_GetTeacher0_HTTP_Handler(srv))
	r.PUT("/v1/teacher/{id}", _App_UpdateTeacher0_HTTP_Handler(srv))
	r.DELETE("/v1/teacher/{id}", _App_DeleteTeacher0_HTTP_Handler(srv))
	r.POST("/v1/book", _App_CreateBook0_HTTP_Handler(srv))
	r.GET("/v1/book", _App_ListBook0_HTTP_Handler(srv))
	r.GET("/v1/book/{id}", _App_GetBook0_HTTP_Handler(srv))
	r.PUT("/v1/book/{id}", _App_UpdateBook0_HTTP_Handler(srv))
	r.DELETE("/v1/book/{id}", _App_DeleteBook0_HTTP_Handler(srv))
}

func _App_CreateLesson0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCreateLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLesson(ctx, req.(*CreateLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_ListLesson0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppListLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLesson(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLessonReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetLesson0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLesson(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLessonReply)
		return ctx.Result(200, reply)
	}
}

func _App_UpdateLesson0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUpdateLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLesson(ctx, req.(*UpdateLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_UpdateLessonStatus0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUpdateLessonStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLessonStatus(ctx, req.(*UpdateLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_DeleteLesson0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeleteLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLesson(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_CreateTeacher0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCreateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTeacher(ctx, req.(*CreateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_ListTeacher0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppListTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTeacher(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetTeacher0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeacher(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _App_UpdateTeacher0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUpdateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_DeleteTeacher0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeleteTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTeacher(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_CreateBook0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCreateBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBook(ctx, req.(*CreateBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_ListBook0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppListBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBook(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBookReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetBook0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBook(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBookReply)
		return ctx.Result(200, reply)
	}
}

func _App_UpdateBook0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUpdateBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBook(ctx, req.(*UpdateBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _App_DeleteBook0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeleteBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBook(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	CreateBook(ctx context.Context, req *CreateBookRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateLesson(ctx context.Context, req *CreateLessonRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateTeacher(ctx context.Context, req *CreateTeacherRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteBook(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteLesson(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTeacher(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBook(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *GetBookReply, err error)
	GetLesson(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *GetLessonReply, err error)
	GetTeacher(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *GetTeacherReply, err error)
	ListBook(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *ListBookReply, err error)
	ListLesson(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *ListLessonReply, err error)
	ListTeacher(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *ListTeacherReply, err error)
	UpdateBook(ctx context.Context, req *UpdateBookRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateLesson(ctx context.Context, req *UpdateLessonRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateLessonStatus(ctx context.Context, req *UpdateLessonRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTeacher(ctx context.Context, req *UpdateTeacherRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/book"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCreateBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/lesson"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCreateLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCreateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) DeleteBook(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/book/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeleteBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) DeleteLesson(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/lesson/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeleteLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) DeleteTeacher(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/teacher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeleteTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetBook(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*GetBookReply, error) {
	var out GetBookReply
	pattern := "/v1/book/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGetBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetLesson(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*GetLessonReply, error) {
	var out GetLessonReply
	pattern := "/v1/lesson/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGetLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetTeacher(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*GetTeacherReply, error) {
	var out GetTeacherReply
	pattern := "/v1/teacher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGetTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ListBook(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*ListBookReply, error) {
	var out ListBookReply
	pattern := "/v1/book"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppListBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ListLesson(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*ListLessonReply, error) {
	var out ListLessonReply
	pattern := "/v1/lesson"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppListLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ListTeacher(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*ListTeacherReply, error) {
	var out ListTeacherReply
	pattern := "/v1/teacher"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppListTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/book/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppUpdateBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/lesson/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppUpdateLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UpdateLessonStatus(ctx context.Context, in *UpdateLessonRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/lesson/{id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppUpdateLessonStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/teacher/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppUpdateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
