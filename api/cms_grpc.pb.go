// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cms.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cms_Ping_FullMethodName                = "/api.Cms/Ping"
	Cms_Login_FullMethodName               = "/api.Cms/Login"
	Cms_CreateBook_FullMethodName          = "/api.Cms/CreateBook"
	Cms_ListBook_FullMethodName            = "/api.Cms/ListBook"
	Cms_GetBook_FullMethodName             = "/api.Cms/GetBook"
	Cms_UpdateBook_FullMethodName          = "/api.Cms/UpdateBook"
	Cms_DeleteBook_FullMethodName          = "/api.Cms/DeleteBook"
	Cms_Upload_FullMethodName              = "/api.Cms/Upload"
	Cms_CreateUser_FullMethodName          = "/api.Cms/CreateUser"
	Cms_UpdateMe_FullMethodName            = "/api.Cms/UpdateMe"
	Cms_UpdateMyPassword_FullMethodName    = "/api.Cms/UpdateMyPassword"
	Cms_ListMyPermission_FullMethodName    = "/api.Cms/ListMyPermission"
	Cms_GetMyInfomation_FullMethodName     = "/api.Cms/GetMyInfomation"
	Cms_ListPermission_FullMethodName      = "/api.Cms/ListPermission"
	Cms_ListUser_FullMethodName            = "/api.Cms/ListUser"
	Cms_UpdateUserPassword_FullMethodName  = "/api.Cms/UpdateUserPassword"
	Cms_DeleteUser_FullMethodName          = "/api.Cms/DeleteUser"
	Cms_UpdateUser_FullMethodName          = "/api.Cms/UpdateUser"
	Cms_GetUser_FullMethodName             = "/api.Cms/GetUser"
	Cms_GetGroup_FullMethodName            = "/api.Cms/GetGroup"
	Cms_UpdateGroup_FullMethodName         = "/api.Cms/UpdateGroup"
	Cms_DeleteGroup_FullMethodName         = "/api.Cms/DeleteGroup"
	Cms_CreateGroup_FullMethodName         = "/api.Cms/CreateGroup"
	Cms_ListGroup_FullMethodName           = "/api.Cms/ListGroup"
	Cms_DispatchPermission_FullMethodName  = "/api.Cms/DispatchPermission"
	Cms_DispatchPermissions_FullMethodName = "/api.Cms/DispatchPermissions"
	Cms_RemovePermission_FullMethodName    = "/api.Cms/RemovePermission"
	Cms_ListLog_FullMethodName             = "/api.Cms/ListLog"
	Cms_SearchLog_FullMethodName           = "/api.Cms/SearchLog"
	Cms_ListLogUser_FullMethodName         = "/api.Cms/ListLogUser"
)

// CmsClient is the client API for Cms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBook(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListBookReply, error)
	GetBook(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetBookReply, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBook(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMe(ctx context.Context, in *UpdateMeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMyPassword(ctx context.Context, in *UpdateMyPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMyPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyPermissionReply, error)
	GetMyInfomation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMyInfomationReply, error)
	ListPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPermissionReply, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListGroupReply, error)
	DispatchPermission(ctx context.Context, in *DispatchPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DispatchPermissions(ctx context.Context, in *DispatchPermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePermission(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLog(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLogReply, error)
	SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*ListLogReply, error)
	ListLogUser(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLogUserReply, error)
}

type cmsClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsClient(cc grpc.ClientConnInterface) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, Cms_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Cms_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListBook(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListBookReply, error) {
	out := new(ListBookReply)
	err := c.cc.Invoke(ctx, Cms_ListBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetBook(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetBookReply, error) {
	out := new(GetBookReply)
	err := c.cc.Invoke(ctx, Cms_GetBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteBook(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_DeleteBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := c.cc.Invoke(ctx, Cms_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateMe(ctx context.Context, in *UpdateMeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateMe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateMyPassword(ctx context.Context, in *UpdateMyPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateMyPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListMyPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyPermissionReply, error) {
	out := new(ListMyPermissionReply)
	err := c.cc.Invoke(ctx, Cms_ListMyPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetMyInfomation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMyInfomationReply, error) {
	out := new(GetMyInfomationReply)
	err := c.cc.Invoke(ctx, Cms_GetMyInfomation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPermissionReply, error) {
	out := new(ListPermissionReply)
	err := c.cc.Invoke(ctx, Cms_ListPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, Cms_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, Cms_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, Cms_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListGroup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListGroupReply, error) {
	out := new(ListGroupReply)
	err := c.cc.Invoke(ctx, Cms_ListGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DispatchPermission(ctx context.Context, in *DispatchPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_DispatchPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DispatchPermissions(ctx context.Context, in *DispatchPermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_DispatchPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) RemovePermission(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cms_RemovePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListLog(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLogReply, error) {
	out := new(ListLogReply)
	err := c.cc.Invoke(ctx, Cms_ListLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*ListLogReply, error) {
	out := new(ListLogReply)
	err := c.cc.Invoke(ctx, Cms_SearchLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) ListLogUser(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ListLogUserReply, error) {
	out := new(ListLogUserReply)
	err := c.cc.Invoke(ctx, Cms_ListLogUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServer is the server API for Cms service.
// All implementations must embed UnimplementedCmsServer
// for forward compatibility
type CmsServer interface {
	Ping(context.Context, *emptypb.Empty) (*PingReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	CreateBook(context.Context, *CreateBookRequest) (*emptypb.Empty, error)
	ListBook(context.Context, *PageRequest) (*ListBookReply, error)
	GetBook(context.Context, *IDRequest) (*GetBookReply, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*emptypb.Empty, error)
	DeleteBook(context.Context, *IDRequest) (*emptypb.Empty, error)
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	UpdateMe(context.Context, *UpdateMeRequest) (*emptypb.Empty, error)
	UpdateMyPassword(context.Context, *UpdateMyPasswordRequest) (*emptypb.Empty, error)
	ListMyPermission(context.Context, *emptypb.Empty) (*ListMyPermissionReply, error)
	GetMyInfomation(context.Context, *emptypb.Empty) (*GetMyInfomationReply, error)
	ListPermission(context.Context, *emptypb.Empty) (*ListPermissionReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *IDRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *IDRequest) (*GetUserReply, error)
	GetGroup(context.Context, *IDRequest) (*GetGroupReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*emptypb.Empty, error)
	DeleteGroup(context.Context, *IDRequest) (*emptypb.Empty, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error)
	ListGroup(context.Context, *emptypb.Empty) (*ListGroupReply, error)
	DispatchPermission(context.Context, *DispatchPermissionRequest) (*emptypb.Empty, error)
	DispatchPermissions(context.Context, *DispatchPermissionsRequest) (*emptypb.Empty, error)
	RemovePermission(context.Context, *RemovePermissionRequest) (*emptypb.Empty, error)
	ListLog(context.Context, *PageRequest) (*ListLogReply, error)
	SearchLog(context.Context, *SearchLogRequest) (*ListLogReply, error)
	ListLogUser(context.Context, *PageRequest) (*ListLogUserReply, error)
	mustEmbedUnimplementedCmsServer()
}

// UnimplementedCmsServer must be embedded to have forward compatible implementations.
type UnimplementedCmsServer struct {
}

func (UnimplementedCmsServer) Ping(context.Context, *emptypb.Empty) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCmsServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCmsServer) CreateBook(context.Context, *CreateBookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedCmsServer) ListBook(context.Context, *PageRequest) (*ListBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBook not implemented")
}
func (UnimplementedCmsServer) GetBook(context.Context, *IDRequest) (*GetBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedCmsServer) UpdateBook(context.Context, *UpdateBookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedCmsServer) DeleteBook(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedCmsServer) Upload(context.Context, *UploadRequest) (*UploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedCmsServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCmsServer) UpdateMe(context.Context, *UpdateMeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMe not implemented")
}
func (UnimplementedCmsServer) UpdateMyPassword(context.Context, *UpdateMyPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyPassword not implemented")
}
func (UnimplementedCmsServer) ListMyPermission(context.Context, *emptypb.Empty) (*ListMyPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyPermission not implemented")
}
func (UnimplementedCmsServer) GetMyInfomation(context.Context, *emptypb.Empty) (*GetMyInfomationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyInfomation not implemented")
}
func (UnimplementedCmsServer) ListPermission(context.Context, *emptypb.Empty) (*ListPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (UnimplementedCmsServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedCmsServer) UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedCmsServer) DeleteUser(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCmsServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCmsServer) GetUser(context.Context, *IDRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCmsServer) GetGroup(context.Context, *IDRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedCmsServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedCmsServer) DeleteGroup(context.Context, *IDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedCmsServer) CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedCmsServer) ListGroup(context.Context, *emptypb.Empty) (*ListGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedCmsServer) DispatchPermission(context.Context, *DispatchPermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchPermission not implemented")
}
func (UnimplementedCmsServer) DispatchPermissions(context.Context, *DispatchPermissionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchPermissions not implemented")
}
func (UnimplementedCmsServer) RemovePermission(context.Context, *RemovePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermission not implemented")
}
func (UnimplementedCmsServer) ListLog(context.Context, *PageRequest) (*ListLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLog not implemented")
}
func (UnimplementedCmsServer) SearchLog(context.Context, *SearchLogRequest) (*ListLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLog not implemented")
}
func (UnimplementedCmsServer) ListLogUser(context.Context, *PageRequest) (*ListLogUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogUser not implemented")
}
func (UnimplementedCmsServer) mustEmbedUnimplementedCmsServer() {}

// UnsafeCmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsServer will
// result in compilation errors.
type UnsafeCmsServer interface {
	mustEmbedUnimplementedCmsServer()
}

func RegisterCmsServer(s grpc.ServiceRegistrar, srv CmsServer) {
	s.RegisterService(&Cms_ServiceDesc, srv)
}

func _Cms_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListBook(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetBook(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteBook(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateMe(ctx, req.(*UpdateMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateMyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateMyPassword(ctx, req.(*UpdateMyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListMyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListMyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListMyPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListMyPermission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetMyInfomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetMyInfomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_GetMyInfomation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetMyInfomation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListPermission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteUser(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetUser(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListGroup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DispatchPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DispatchPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DispatchPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DispatchPermission(ctx, req.(*DispatchPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DispatchPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DispatchPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_DispatchPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DispatchPermissions(ctx, req.(*DispatchPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_RemovePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).RemovePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_RemovePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).RemovePermission(ctx, req.(*RemovePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListLog(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_SearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_SearchLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SearchLog(ctx, req.(*SearchLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_ListLogUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).ListLogUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cms_ListLogUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).ListLogUser(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cms_ServiceDesc is the grpc.ServiceDesc for Cms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Cms_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Cms_Login_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _Cms_CreateBook_Handler,
		},
		{
			MethodName: "ListBook",
			Handler:    _Cms_ListBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Cms_GetBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _Cms_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _Cms_DeleteBook_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Cms_Upload_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Cms_CreateUser_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _Cms_UpdateMe_Handler,
		},
		{
			MethodName: "UpdateMyPassword",
			Handler:    _Cms_UpdateMyPassword_Handler,
		},
		{
			MethodName: "ListMyPermission",
			Handler:    _Cms_ListMyPermission_Handler,
		},
		{
			MethodName: "GetMyInfomation",
			Handler:    _Cms_GetMyInfomation_Handler,
		},
		{
			MethodName: "ListPermission",
			Handler:    _Cms_ListPermission_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Cms_ListUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Cms_UpdateUserPassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Cms_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Cms_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cms_GetUser_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Cms_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Cms_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Cms_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Cms_CreateGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _Cms_ListGroup_Handler,
		},
		{
			MethodName: "DispatchPermission",
			Handler:    _Cms_DispatchPermission_Handler,
		},
		{
			MethodName: "DispatchPermissions",
			Handler:    _Cms_DispatchPermissions_Handler,
		},
		{
			MethodName: "RemovePermission",
			Handler:    _Cms_RemovePermission_Handler,
		},
		{
			MethodName: "ListLog",
			Handler:    _Cms_ListLog_Handler,
		},
		{
			MethodName: "SearchLog",
			Handler:    _Cms_SearchLog_Handler,
		},
		{
			MethodName: "ListLogUser",
			Handler:    _Cms_ListLogUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}
