// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.12
// source: cms.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCmsCreateGroup = "/api.Cms/CreateGroup"
const OperationCmsCreateUser = "/api.Cms/CreateUser"
const OperationCmsDeleteGroup = "/api.Cms/DeleteGroup"
const OperationCmsDeleteUser = "/api.Cms/DeleteUser"
const OperationCmsDispatchPermission = "/api.Cms/DispatchPermission"
const OperationCmsDispatchPermissions = "/api.Cms/DispatchPermissions"
const OperationCmsGetGroup = "/api.Cms/GetGroup"
const OperationCmsGetMyInfomation = "/api.Cms/GetMyInfomation"
const OperationCmsGetUser = "/api.Cms/GetUser"
const OperationCmsListGroup = "/api.Cms/ListGroup"
const OperationCmsListLog = "/api.Cms/ListLog"
const OperationCmsListLogUser = "/api.Cms/ListLogUser"
const OperationCmsListMyPermission = "/api.Cms/ListMyPermission"
const OperationCmsListPermission = "/api.Cms/ListPermission"
const OperationCmsListUser = "/api.Cms/ListUser"
const OperationCmsLogin = "/api.Cms/Login"
const OperationCmsPing = "/api.Cms/Ping"
const OperationCmsRemovePermission = "/api.Cms/RemovePermission"
const OperationCmsSearchLog = "/api.Cms/SearchLog"
const OperationCmsUpdateGroup = "/api.Cms/UpdateGroup"
const OperationCmsUpdateMe = "/api.Cms/UpdateMe"
const OperationCmsUpdateMyPassword = "/api.Cms/UpdateMyPassword"
const OperationCmsUpdateUser = "/api.Cms/UpdateUser"
const OperationCmsUpdateUserPassword = "/api.Cms/UpdateUserPassword"
const OperationCmsUpload = "/api.Cms/Upload"

type CmsHTTPServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error)
	CreateUser(context.Context, *CreateLinUserRequest) (*emptypb.Empty, error)
	DeleteGroup(context.Context, *IDRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *IDRequest) (*emptypb.Empty, error)
	DispatchPermission(context.Context, *DispatchPermissionRequest) (*emptypb.Empty, error)
	DispatchPermissions(context.Context, *DispatchPermissionsRequest) (*emptypb.Empty, error)
	GetGroup(context.Context, *IDRequest) (*GetGroupReply, error)
	GetMyInfomation(context.Context, *emptypb.Empty) (*GetMyInfomationReply, error)
	GetUser(context.Context, *IDRequest) (*GetLinUserReply, error)
	ListGroup(context.Context, *emptypb.Empty) (*ListGroupReply, error)
	ListLog(context.Context, *PageRequest) (*ListLogReply, error)
	ListLogUser(context.Context, *PageRequest) (*ListLogUserReply, error)
	ListMyPermission(context.Context, *emptypb.Empty) (*ListMyPermissionReply, error)
	ListPermission(context.Context, *emptypb.Empty) (*ListPermissionReply, error)
	ListUser(context.Context, *ListLinUserRequest) (*ListLinUserReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Ping(context.Context, *emptypb.Empty) (*PingReply, error)
	RemovePermission(context.Context, *RemovePermissionRequest) (*emptypb.Empty, error)
	SearchLog(context.Context, *SearchLogRequest) (*ListLogReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*emptypb.Empty, error)
	UpdateMe(context.Context, *UpdateMeRequest) (*emptypb.Empty, error)
	UpdateMyPassword(context.Context, *UpdateMyPasswordRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*emptypb.Empty, error)
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
}

func RegisterCmsHTTPServer(s *http.Server, srv CmsHTTPServer) {
	r := s.Route("/")
	r.GET("/ping", _Cms_Ping0_HTTP_Handler(srv))
	r.POST("/cms/user/login", _Cms_Login0_HTTP_Handler(srv))
	r.POST("/cms/file", _Cms_Upload0_HTTP_Handler(srv))
	r.POST("/cms/user/register", _Cms_CreateUser0_HTTP_Handler(srv))
	r.PUT("/cms/user", _Cms_UpdateMe0_HTTP_Handler(srv))
	r.PUT("/cms/user/change_password", _Cms_UpdateMyPassword0_HTTP_Handler(srv))
	r.GET("/cms/user/permissions", _Cms_ListMyPermission0_HTTP_Handler(srv))
	r.GET("/cms/user/information", _Cms_GetMyInfomation0_HTTP_Handler(srv))
	r.GET("/cms/admin/permissions", _Cms_ListPermission0_HTTP_Handler(srv))
	r.GET("/cms/admin/users", _Cms_ListUser0_HTTP_Handler(srv))
	r.PUT("/cms/admin/user/{id}/password", _Cms_UpdateUserPassword0_HTTP_Handler(srv))
	r.DELETE("/cms/admin/user/{id}", _Cms_DeleteUser0_HTTP_Handler(srv))
	r.PUT("/cms/admin/user/{id}", _Cms_UpdateUser0_HTTP_Handler(srv))
	r.GET("/cms/admin/user/{id}", _Cms_GetUser0_HTTP_Handler(srv))
	r.GET("/cms/admin/group/{id}", _Cms_GetGroup0_HTTP_Handler(srv))
	r.PUT("/cms/admin/group/{id}", _Cms_UpdateGroup0_HTTP_Handler(srv))
	r.DELETE("/cms/admin/group/{id}", _Cms_DeleteGroup0_HTTP_Handler(srv))
	r.POST("/cms/admin/group", _Cms_CreateGroup0_HTTP_Handler(srv))
	r.GET("/cms/admin/groups", _Cms_ListGroup0_HTTP_Handler(srv))
	r.POST("/cms/admin/permission/dispatch", _Cms_DispatchPermission0_HTTP_Handler(srv))
	r.POST("/cms/admin/permissions/dispatch", _Cms_DispatchPermissions0_HTTP_Handler(srv))
	r.POST("/cms/admin/permissions/remove", _Cms_RemovePermission0_HTTP_Handler(srv))
	r.GET("/cms/log", _Cms_ListLog0_HTTP_Handler(srv))
	r.GET("/cms/log/search", _Cms_SearchLog0_HTTP_Handler(srv))
	r.GET("/cms/log/users", _Cms_ListLogUser0_HTTP_Handler(srv))
}

func _Cms_Ping0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_Login0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_Upload0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upload(ctx, req.(*UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_CreateUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateLinUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_UpdateMe0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpdateMe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMe(ctx, req.(*UpdateMeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_UpdateMyPassword0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMyPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpdateMyPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMyPassword(ctx, req.(*UpdateMyPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListMyPermission0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListMyPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyPermission(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMyPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_GetMyInfomation0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsGetMyInfomation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMyInfomation(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMyInfomationReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListPermission0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPermission(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListLinUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinUserReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_UpdateUserPassword0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpdateUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_DeleteUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_UpdateUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_GetUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLinUserReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_GetGroup0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_UpdateGroup0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsUpdateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroup(ctx, req.(*UpdateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_DeleteGroup0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsDeleteGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGroup(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_CreateGroup0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsCreateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGroup(ctx, req.(*CreateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListGroup0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroup(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_DispatchPermission0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DispatchPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsDispatchPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DispatchPermission(ctx, req.(*DispatchPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_DispatchPermissions0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DispatchPermissionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsDispatchPermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DispatchPermissions(ctx, req.(*DispatchPermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_RemovePermission0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemovePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsRemovePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemovePermission(ctx, req.(*RemovePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListLog0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLog(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_SearchLog0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsSearchLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchLog(ctx, req.(*SearchLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogReply)
		return ctx.Result(200, reply)
	}
}

func _Cms_ListLogUser0_HTTP_Handler(srv CmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCmsListLogUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogUser(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogUserReply)
		return ctx.Result(200, reply)
	}
}

type CmsHTTPClient interface {
	CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateUser(ctx context.Context, req *CreateLinUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteGroup(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUser(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DispatchPermission(ctx context.Context, req *DispatchPermissionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DispatchPermissions(ctx context.Context, req *DispatchPermissionsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetGroup(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *GetGroupReply, err error)
	GetMyInfomation(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMyInfomationReply, err error)
	GetUser(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *GetLinUserReply, err error)
	ListGroup(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListGroupReply, err error)
	ListLog(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *ListLogReply, err error)
	ListLogUser(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *ListLogUserReply, err error)
	ListMyPermission(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListMyPermissionReply, err error)
	ListPermission(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListPermissionReply, err error)
	ListUser(ctx context.Context, req *ListLinUserRequest, opts ...http.CallOption) (rsp *ListLinUserReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *PingReply, err error)
	RemovePermission(ctx context.Context, req *RemovePermissionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SearchLog(ctx context.Context, req *SearchLogRequest, opts ...http.CallOption) (rsp *ListLogReply, err error)
	UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateMe(ctx context.Context, req *UpdateMeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateMyPassword(ctx context.Context, req *UpdateMyPasswordRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Upload(ctx context.Context, req *UploadRequest, opts ...http.CallOption) (rsp *UploadReply, err error)
}

type CmsHTTPClientImpl struct {
	cc *http.Client
}

func NewCmsHTTPClient(client *http.Client) CmsHTTPClient {
	return &CmsHTTPClientImpl{client}
}

func (c *CmsHTTPClientImpl) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsCreateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) CreateUser(ctx context.Context, in *CreateLinUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) DeleteGroup(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsDeleteGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) DeleteUser(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) DispatchPermission(ctx context.Context, in *DispatchPermissionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/permission/dispatch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsDispatchPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) DispatchPermissions(ctx context.Context, in *DispatchPermissionsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/permissions/dispatch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsDispatchPermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) GetGroup(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*GetGroupReply, error) {
	var out GetGroupReply
	pattern := "/cms/admin/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) GetMyInfomation(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMyInfomationReply, error) {
	var out GetMyInfomationReply
	pattern := "/cms/user/information"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsGetMyInfomation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) GetUser(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*GetLinUserReply, error) {
	var out GetLinUserReply
	pattern := "/cms/admin/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListGroup(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListGroupReply, error) {
	var out ListGroupReply
	pattern := "/cms/admin/groups"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListLog(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*ListLogReply, error) {
	var out ListLogReply
	pattern := "/cms/log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListLogUser(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*ListLogUserReply, error) {
	var out ListLogUserReply
	pattern := "/cms/log/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListLogUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListMyPermission(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListMyPermissionReply, error) {
	var out ListMyPermissionReply
	pattern := "/cms/user/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListMyPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListPermission(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListPermissionReply, error) {
	var out ListPermissionReply
	pattern := "/cms/admin/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) ListUser(ctx context.Context, in *ListLinUserRequest, opts ...http.CallOption) (*ListLinUserReply, error) {
	var out ListLinUserReply
	pattern := "/cms/admin/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/cms/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*PingReply, error) {
	var out PingReply
	pattern := "/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) RemovePermission(ctx context.Context, in *RemovePermissionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/permissions/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsRemovePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) SearchLog(ctx context.Context, in *SearchLogRequest, opts ...http.CallOption) (*ListLogReply, error) {
	var out ListLogReply
	pattern := "/cms/log/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCmsSearchLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/group/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpdateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) UpdateMe(ctx context.Context, in *UpdateMeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpdateMe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) UpdateMyPassword(ctx context.Context, in *UpdateMyPasswordRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/user/change_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpdateMyPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cms/admin/user/{id}/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpdateUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmsHTTPClientImpl) Upload(ctx context.Context, in *UploadRequest, opts ...http.CallOption) (*UploadReply, error) {
	var out UploadReply
	pattern := "/cms/file"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCmsUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
