// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"lin-cms-go/internal/data/model/linlog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// LinLog is the model entity for the LinLog schema.
type LinLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Permission holds the value of the "permission" field.
	Permission string `json:"permission,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case linlog.FieldID, linlog.FieldUserID, linlog.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case linlog.FieldMessage, linlog.FieldUsername, linlog.FieldMethod, linlog.FieldPath, linlog.FieldPermission:
			values[i] = new(sql.NullString)
		case linlog.FieldCreateTime, linlog.FieldUpdateTime, linlog.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LinLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinLog fields.
func (ll *LinLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ll.ID = int(value.Int64)
		case linlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ll.CreateTime = value.Time
			}
		case linlog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ll.UpdateTime = value.Time
			}
		case linlog.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ll.DeleteTime = value.Time
			}
		case linlog.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ll.Message = value.String
			}
		case linlog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ll.UserID = int(value.Int64)
			}
		case linlog.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ll.Username = value.String
			}
		case linlog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				ll.StatusCode = int(value.Int64)
			}
		case linlog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ll.Method = value.String
			}
		case linlog.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				ll.Path = value.String
			}
		case linlog.FieldPermission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission", values[i])
			} else if value.Valid {
				ll.Permission = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LinLog.
// Note that you need to call LinLog.Unwrap() before calling this method if this LinLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ll *LinLog) Update() *LinLogUpdateOne {
	return (&LinLogClient{config: ll.config}).UpdateOne(ll)
}

// Unwrap unwraps the LinLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ll *LinLog) Unwrap() *LinLog {
	tx, ok := ll.config.driver.(*txDriver)
	if !ok {
		panic("model: LinLog is not a transactional entity")
	}
	ll.config.driver = tx.drv
	return ll
}

// String implements the fmt.Stringer.
func (ll *LinLog) String() string {
	var builder strings.Builder
	builder.WriteString("LinLog(")
	builder.WriteString(fmt.Sprintf("id=%v", ll.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ll.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ll.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(ll.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", message=")
	builder.WriteString(ll.Message)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ll.UserID))
	builder.WriteString(", username=")
	builder.WriteString(ll.Username)
	builder.WriteString(", status_code=")
	builder.WriteString(fmt.Sprintf("%v", ll.StatusCode))
	builder.WriteString(", method=")
	builder.WriteString(ll.Method)
	builder.WriteString(", path=")
	builder.WriteString(ll.Path)
	builder.WriteString(", permission=")
	builder.WriteString(ll.Permission)
	builder.WriteByte(')')
	return builder.String()
}

// LinLogs is a parsable slice of LinLog.
type LinLogs []*LinLog

func (ll LinLogs) config(cfg config) {
	for _i := range ll {
		ll[_i].config = cfg
	}
}
