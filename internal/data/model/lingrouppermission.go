// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"lin-cms-go/internal/data/model/lingrouppermission"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// LinGroupPermission is the model entity for the LinGroupPermission schema.
type LinGroupPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	// 分组id
	GroupID int `json:"group_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	// 权限id
	PermissionID int `json:"permission_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinGroupPermission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lingrouppermission.FieldID, lingrouppermission.FieldGroupID, lingrouppermission.FieldPermissionID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LinGroupPermission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinGroupPermission fields.
func (lgp *LinGroupPermission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lingrouppermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lgp.ID = int(value.Int64)
		case lingrouppermission.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				lgp.GroupID = int(value.Int64)
			}
		case lingrouppermission.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				lgp.PermissionID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LinGroupPermission.
// Note that you need to call LinGroupPermission.Unwrap() before calling this method if this LinGroupPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (lgp *LinGroupPermission) Update() *LinGroupPermissionUpdateOne {
	return (&LinGroupPermissionClient{config: lgp.config}).UpdateOne(lgp)
}

// Unwrap unwraps the LinGroupPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lgp *LinGroupPermission) Unwrap() *LinGroupPermission {
	tx, ok := lgp.config.driver.(*txDriver)
	if !ok {
		panic("model: LinGroupPermission is not a transactional entity")
	}
	lgp.config.driver = tx.drv
	return lgp
}

// String implements the fmt.Stringer.
func (lgp *LinGroupPermission) String() string {
	var builder strings.Builder
	builder.WriteString("LinGroupPermission(")
	builder.WriteString(fmt.Sprintf("id=%v", lgp.ID))
	builder.WriteString(", group_id=")
	builder.WriteString(fmt.Sprintf("%v", lgp.GroupID))
	builder.WriteString(", permission_id=")
	builder.WriteString(fmt.Sprintf("%v", lgp.PermissionID))
	builder.WriteByte(')')
	return builder.String()
}

// LinGroupPermissions is a parsable slice of LinGroupPermission.
type LinGroupPermissions []*LinGroupPermission

func (lgp LinGroupPermissions) config(cfg config) {
	for _i := range lgp {
		lgp[_i].config = cfg
	}
}
