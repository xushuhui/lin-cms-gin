// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"lin-cms-go/internal/data/model/linpermission"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// LinPermission is the model entity for the LinPermission schema.
type LinPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	// 权限名称，例如：访问首页
	Name string `json:"name,omitempty"`
	// Module holds the value of the "module" field.
	// 权限所属模块，例如：人员管理
	Module string `json:"module,omitempty"`
	// Mount holds the value of the "mount" field.
	// 0：关闭 1：开启
	Mount int8 `json:"mount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinPermissionQuery when eager-loading is set.
	Edges LinPermissionEdges `json:"edges"`
}

// LinPermissionEdges holds the relations/edges for other nodes in the graph.
type LinPermissionEdges struct {
	// LinGroup holds the value of the lin_group edge.
	LinGroup []*LinGroup `json:"lin_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LinGroupOrErr returns the LinGroup value or an error if the edge
// was not loaded in eager-loading.
func (e LinPermissionEdges) LinGroupOrErr() ([]*LinGroup, error) {
	if e.loadedTypes[0] {
		return e.LinGroup, nil
	}
	return nil, &NotLoadedError{edge: "lin_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinPermission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case linpermission.FieldID, linpermission.FieldMount:
			values[i] = new(sql.NullInt64)
		case linpermission.FieldName, linpermission.FieldModule:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LinPermission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinPermission fields.
func (lp *LinPermission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lp.ID = int(value.Int64)
		case linpermission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lp.Name = value.String
			}
		case linpermission.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				lp.Module = value.String
			}
		case linpermission.FieldMount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mount", values[i])
			} else if value.Valid {
				lp.Mount = int8(value.Int64)
			}
		}
	}
	return nil
}

// QueryLinGroup queries the "lin_group" edge of the LinPermission entity.
func (lp *LinPermission) QueryLinGroup() *LinGroupQuery {
	return (&LinPermissionClient{config: lp.config}).QueryLinGroup(lp)
}

// Update returns a builder for updating this LinPermission.
// Note that you need to call LinPermission.Unwrap() before calling this method if this LinPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (lp *LinPermission) Update() *LinPermissionUpdateOne {
	return (&LinPermissionClient{config: lp.config}).UpdateOne(lp)
}

// Unwrap unwraps the LinPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lp *LinPermission) Unwrap() *LinPermission {
	tx, ok := lp.config.driver.(*txDriver)
	if !ok {
		panic("model: LinPermission is not a transactional entity")
	}
	lp.config.driver = tx.drv
	return lp
}

// String implements the fmt.Stringer.
func (lp *LinPermission) String() string {
	var builder strings.Builder
	builder.WriteString("LinPermission(")
	builder.WriteString(fmt.Sprintf("id=%v", lp.ID))
	builder.WriteString(", name=")
	builder.WriteString(lp.Name)
	builder.WriteString(", module=")
	builder.WriteString(lp.Module)
	builder.WriteString(", mount=")
	builder.WriteString(fmt.Sprintf("%v", lp.Mount))
	builder.WriteByte(')')
	return builder.String()
}

// LinPermissions is a parsable slice of LinPermission.
type LinPermissions []*LinPermission

func (lp LinPermissions) config(cfg config) {
	for _i := range lp {
		lp[_i].config = cfg
	}
}
