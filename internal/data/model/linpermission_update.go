// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/lingroup"
	"lin-cms-go/internal/data/model/linpermission"
	"lin-cms-go/internal/data/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinPermissionUpdate is the builder for updating LinPermission entities.
type LinPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *LinPermissionMutation
}

// Where appends a list predicates to the LinPermissionUpdate builder.
func (lpu *LinPermissionUpdate) Where(ps ...predicate.LinPermission) *LinPermissionUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetName sets the "name" field.
func (lpu *LinPermissionUpdate) SetName(s string) *LinPermissionUpdate {
	lpu.mutation.SetName(s)
	return lpu
}

// SetModule sets the "module" field.
func (lpu *LinPermissionUpdate) SetModule(s string) *LinPermissionUpdate {
	lpu.mutation.SetModule(s)
	return lpu
}

// SetMount sets the "mount" field.
func (lpu *LinPermissionUpdate) SetMount(i int8) *LinPermissionUpdate {
	lpu.mutation.ResetMount()
	lpu.mutation.SetMount(i)
	return lpu
}

// AddMount adds i to the "mount" field.
func (lpu *LinPermissionUpdate) AddMount(i int8) *LinPermissionUpdate {
	lpu.mutation.AddMount(i)
	return lpu
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by IDs.
func (lpu *LinPermissionUpdate) AddLinGroupIDs(ids ...int) *LinPermissionUpdate {
	lpu.mutation.AddLinGroupIDs(ids...)
	return lpu
}

// AddLinGroup adds the "lin_group" edges to the LinGroup entity.
func (lpu *LinPermissionUpdate) AddLinGroup(l ...*LinGroup) *LinPermissionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpu.AddLinGroupIDs(ids...)
}

// Mutation returns the LinPermissionMutation object of the builder.
func (lpu *LinPermissionUpdate) Mutation() *LinPermissionMutation {
	return lpu.mutation
}

// ClearLinGroup clears all "lin_group" edges to the LinGroup entity.
func (lpu *LinPermissionUpdate) ClearLinGroup() *LinPermissionUpdate {
	lpu.mutation.ClearLinGroup()
	return lpu
}

// RemoveLinGroupIDs removes the "lin_group" edge to LinGroup entities by IDs.
func (lpu *LinPermissionUpdate) RemoveLinGroupIDs(ids ...int) *LinPermissionUpdate {
	lpu.mutation.RemoveLinGroupIDs(ids...)
	return lpu
}

// RemoveLinGroup removes "lin_group" edges to LinGroup entities.
func (lpu *LinPermissionUpdate) RemoveLinGroup(l ...*LinGroup) *LinPermissionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpu.RemoveLinGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LinPermissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lpu.hooks) == 0 {
		affected, err = lpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lpu.mutation = mutation
			affected, err = lpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lpu.hooks) - 1; i >= 0; i-- {
			if lpu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LinPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LinPermissionUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LinPermissionUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpu *LinPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linpermission.Table,
			Columns: linpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linpermission.FieldID,
			},
		},
	}
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldName,
		})
	}
	if value, ok := lpu.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldModule,
		})
	}
	if value, ok := lpu.mutation.Mount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linpermission.FieldMount,
		})
	}
	if value, ok := lpu.mutation.AddedMount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linpermission.FieldMount,
		})
	}
	if lpu.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.RemovedLinGroupIDs(); len(nodes) > 0 && !lpu.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.LinGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinPermissionUpdateOne is the builder for updating a single LinPermission entity.
type LinPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinPermissionMutation
}

// SetName sets the "name" field.
func (lpuo *LinPermissionUpdateOne) SetName(s string) *LinPermissionUpdateOne {
	lpuo.mutation.SetName(s)
	return lpuo
}

// SetModule sets the "module" field.
func (lpuo *LinPermissionUpdateOne) SetModule(s string) *LinPermissionUpdateOne {
	lpuo.mutation.SetModule(s)
	return lpuo
}

// SetMount sets the "mount" field.
func (lpuo *LinPermissionUpdateOne) SetMount(i int8) *LinPermissionUpdateOne {
	lpuo.mutation.ResetMount()
	lpuo.mutation.SetMount(i)
	return lpuo
}

// AddMount adds i to the "mount" field.
func (lpuo *LinPermissionUpdateOne) AddMount(i int8) *LinPermissionUpdateOne {
	lpuo.mutation.AddMount(i)
	return lpuo
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by IDs.
func (lpuo *LinPermissionUpdateOne) AddLinGroupIDs(ids ...int) *LinPermissionUpdateOne {
	lpuo.mutation.AddLinGroupIDs(ids...)
	return lpuo
}

// AddLinGroup adds the "lin_group" edges to the LinGroup entity.
func (lpuo *LinPermissionUpdateOne) AddLinGroup(l ...*LinGroup) *LinPermissionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpuo.AddLinGroupIDs(ids...)
}

// Mutation returns the LinPermissionMutation object of the builder.
func (lpuo *LinPermissionUpdateOne) Mutation() *LinPermissionMutation {
	return lpuo.mutation
}

// ClearLinGroup clears all "lin_group" edges to the LinGroup entity.
func (lpuo *LinPermissionUpdateOne) ClearLinGroup() *LinPermissionUpdateOne {
	lpuo.mutation.ClearLinGroup()
	return lpuo
}

// RemoveLinGroupIDs removes the "lin_group" edge to LinGroup entities by IDs.
func (lpuo *LinPermissionUpdateOne) RemoveLinGroupIDs(ids ...int) *LinPermissionUpdateOne {
	lpuo.mutation.RemoveLinGroupIDs(ids...)
	return lpuo
}

// RemoveLinGroup removes "lin_group" edges to LinGroup entities.
func (lpuo *LinPermissionUpdateOne) RemoveLinGroup(l ...*LinGroup) *LinPermissionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpuo.RemoveLinGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LinPermissionUpdateOne) Select(field string, fields ...string) *LinPermissionUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LinPermission entity.
func (lpuo *LinPermissionUpdateOne) Save(ctx context.Context) (*LinPermission, error) {
	var (
		err  error
		node *LinPermission
	)
	if len(lpuo.hooks) == 0 {
		node, err = lpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lpuo.mutation = mutation
			node, err = lpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lpuo.hooks) - 1; i >= 0; i-- {
			if lpuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LinPermissionUpdateOne) SaveX(ctx context.Context) *LinPermission {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LinPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LinPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpuo *LinPermissionUpdateOne) sqlSave(ctx context.Context) (_node *LinPermission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linpermission.Table,
			Columns: linpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linpermission.FieldID,
			},
		},
	}
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinPermission.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linpermission.FieldID)
		for _, f := range fields {
			if !linpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != linpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldName,
		})
	}
	if value, ok := lpuo.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldModule,
		})
	}
	if value, ok := lpuo.mutation.Mount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linpermission.FieldMount,
		})
	}
	if value, ok := lpuo.mutation.AddedMount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linpermission.FieldMount,
		})
	}
	if lpuo.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.RemovedLinGroupIDs(); len(nodes) > 0 && !lpuo.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.LinGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LinPermission{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
