// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"lin-cms-go/internal/data/model/linfile"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinFileCreate is the builder for creating a LinFile entity.
type LinFileCreate struct {
	config
	mutation *LinFileMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (lfc *LinFileCreate) SetPath(s string) *LinFileCreate {
	lfc.mutation.SetPath(s)
	return lfc
}

// SetType sets the "type" field.
func (lfc *LinFileCreate) SetType(i int8) *LinFileCreate {
	lfc.mutation.SetType(i)
	return lfc
}

// SetName sets the "name" field.
func (lfc *LinFileCreate) SetName(s string) *LinFileCreate {
	lfc.mutation.SetName(s)
	return lfc
}

// SetExtension sets the "extension" field.
func (lfc *LinFileCreate) SetExtension(s string) *LinFileCreate {
	lfc.mutation.SetExtension(s)
	return lfc
}

// SetSize sets the "size" field.
func (lfc *LinFileCreate) SetSize(i int) *LinFileCreate {
	lfc.mutation.SetSize(i)
	return lfc
}

// SetMd5 sets the "md5" field.
func (lfc *LinFileCreate) SetMd5(s string) *LinFileCreate {
	lfc.mutation.SetMd5(s)
	return lfc
}

// Mutation returns the LinFileMutation object of the builder.
func (lfc *LinFileCreate) Mutation() *LinFileMutation {
	return lfc.mutation
}

// Save creates the LinFile in the database.
func (lfc *LinFileCreate) Save(ctx context.Context) (*LinFile, error) {
	var (
		err  error
		node *LinFile
	)
	if len(lfc.hooks) == 0 {
		if err = lfc.check(); err != nil {
			return nil, err
		}
		node, err = lfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lfc.check(); err != nil {
				return nil, err
			}
			lfc.mutation = mutation
			if node, err = lfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lfc.hooks) - 1; i >= 0; i-- {
			if lfc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lfc *LinFileCreate) SaveX(ctx context.Context) *LinFile {
	v, err := lfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lfc *LinFileCreate) Exec(ctx context.Context) error {
	_, err := lfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfc *LinFileCreate) ExecX(ctx context.Context) {
	if err := lfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lfc *LinFileCreate) check() error {
	if _, ok := lfc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`model: missing required field "path"`)}
	}
	if _, ok := lfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "type"`)}
	}
	if _, ok := lfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "name"`)}
	}
	if _, ok := lfc.mutation.Extension(); !ok {
		return &ValidationError{Name: "extension", err: errors.New(`model: missing required field "extension"`)}
	}
	if _, ok := lfc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`model: missing required field "size"`)}
	}
	if _, ok := lfc.mutation.Md5(); !ok {
		return &ValidationError{Name: "md5", err: errors.New(`model: missing required field "md5"`)}
	}
	return nil
}

func (lfc *LinFileCreate) sqlSave(ctx context.Context) (*LinFile, error) {
	_node, _spec := lfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lfc *LinFileCreate) createSpec() (*LinFile, *sqlgraph.CreateSpec) {
	var (
		_node = &LinFile{config: lfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: linfile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linfile.FieldID,
			},
		}
	)
	if value, ok := lfc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := lfc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linfile.FieldType,
		})
		_node.Type = value
	}
	if value, ok := lfc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldName,
		})
		_node.Name = value
	}
	if value, ok := lfc.mutation.Extension(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldExtension,
		})
		_node.Extension = value
	}
	if value, ok := lfc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linfile.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := lfc.mutation.Md5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldMd5,
		})
		_node.Md5 = value
	}
	return _node, _spec
}

// LinFileCreateBulk is the builder for creating many LinFile entities in bulk.
type LinFileCreateBulk struct {
	config
	builders []*LinFileCreate
}

// Save creates the LinFile entities in the database.
func (lfcb *LinFileCreateBulk) Save(ctx context.Context) ([]*LinFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lfcb.builders))
	nodes := make([]*LinFile, len(lfcb.builders))
	mutators := make([]Mutator, len(lfcb.builders))
	for i := range lfcb.builders {
		func(i int, root context.Context) {
			builder := lfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lfcb *LinFileCreateBulk) SaveX(ctx context.Context) []*LinFile {
	v, err := lfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lfcb *LinFileCreateBulk) Exec(ctx context.Context) error {
	_, err := lfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfcb *LinFileCreateBulk) ExecX(ctx context.Context) {
	if err := lfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
