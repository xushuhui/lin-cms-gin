// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/lingroup"
	"lin-cms-go/internal/data/model/linuser"
	"lin-cms-go/internal/data/model/linuseridentiy"
	"lin-cms-go/internal/data/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinUserUpdate is the builder for updating LinUser entities.
type LinUserUpdate struct {
	config
	hooks    []Hook
	mutation *LinUserMutation
}

// Where appends a list predicates to the LinUserUpdate builder.
func (luu *LinUserUpdate) Where(ps ...predicate.LinUser) *LinUserUpdate {
	luu.mutation.Where(ps...)
	return luu
}

// SetUpdateTime sets the "update_time" field.
func (luu *LinUserUpdate) SetUpdateTime(t time.Time) *LinUserUpdate {
	luu.mutation.SetUpdateTime(t)
	return luu
}

// SetDeleteTime sets the "delete_time" field.
func (luu *LinUserUpdate) SetDeleteTime(t time.Time) *LinUserUpdate {
	luu.mutation.SetDeleteTime(t)
	return luu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (luu *LinUserUpdate) SetNillableDeleteTime(t *time.Time) *LinUserUpdate {
	if t != nil {
		luu.SetDeleteTime(*t)
	}
	return luu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (luu *LinUserUpdate) ClearDeleteTime() *LinUserUpdate {
	luu.mutation.ClearDeleteTime()
	return luu
}

// SetUsername sets the "username" field.
func (luu *LinUserUpdate) SetUsername(s string) *LinUserUpdate {
	luu.mutation.SetUsername(s)
	return luu
}

// SetNickname sets the "nickname" field.
func (luu *LinUserUpdate) SetNickname(s string) *LinUserUpdate {
	luu.mutation.SetNickname(s)
	return luu
}

// SetAvatar sets the "avatar" field.
func (luu *LinUserUpdate) SetAvatar(s string) *LinUserUpdate {
	luu.mutation.SetAvatar(s)
	return luu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (luu *LinUserUpdate) SetNillableAvatar(s *string) *LinUserUpdate {
	if s != nil {
		luu.SetAvatar(*s)
	}
	return luu
}

// SetEmail sets the "email" field.
func (luu *LinUserUpdate) SetEmail(s string) *LinUserUpdate {
	luu.mutation.SetEmail(s)
	return luu
}

// AddLinUserIdentiyIDs adds the "lin_user_identiy" edge to the LinUserIdentiy entity by IDs.
func (luu *LinUserUpdate) AddLinUserIdentiyIDs(ids ...int) *LinUserUpdate {
	luu.mutation.AddLinUserIdentiyIDs(ids...)
	return luu
}

// AddLinUserIdentiy adds the "lin_user_identiy" edges to the LinUserIdentiy entity.
func (luu *LinUserUpdate) AddLinUserIdentiy(l ...*LinUserIdentiy) *LinUserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luu.AddLinUserIdentiyIDs(ids...)
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by IDs.
func (luu *LinUserUpdate) AddLinGroupIDs(ids ...int) *LinUserUpdate {
	luu.mutation.AddLinGroupIDs(ids...)
	return luu
}

// AddLinGroup adds the "lin_group" edges to the LinGroup entity.
func (luu *LinUserUpdate) AddLinGroup(l ...*LinGroup) *LinUserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luu.AddLinGroupIDs(ids...)
}

// Mutation returns the LinUserMutation object of the builder.
func (luu *LinUserUpdate) Mutation() *LinUserMutation {
	return luu.mutation
}

// ClearLinUserIdentiy clears all "lin_user_identiy" edges to the LinUserIdentiy entity.
func (luu *LinUserUpdate) ClearLinUserIdentiy() *LinUserUpdate {
	luu.mutation.ClearLinUserIdentiy()
	return luu
}

// RemoveLinUserIdentiyIDs removes the "lin_user_identiy" edge to LinUserIdentiy entities by IDs.
func (luu *LinUserUpdate) RemoveLinUserIdentiyIDs(ids ...int) *LinUserUpdate {
	luu.mutation.RemoveLinUserIdentiyIDs(ids...)
	return luu
}

// RemoveLinUserIdentiy removes "lin_user_identiy" edges to LinUserIdentiy entities.
func (luu *LinUserUpdate) RemoveLinUserIdentiy(l ...*LinUserIdentiy) *LinUserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luu.RemoveLinUserIdentiyIDs(ids...)
}

// ClearLinGroup clears all "lin_group" edges to the LinGroup entity.
func (luu *LinUserUpdate) ClearLinGroup() *LinUserUpdate {
	luu.mutation.ClearLinGroup()
	return luu
}

// RemoveLinGroupIDs removes the "lin_group" edge to LinGroup entities by IDs.
func (luu *LinUserUpdate) RemoveLinGroupIDs(ids ...int) *LinUserUpdate {
	luu.mutation.RemoveLinGroupIDs(ids...)
	return luu
}

// RemoveLinGroup removes "lin_group" edges to LinGroup entities.
func (luu *LinUserUpdate) RemoveLinGroup(l ...*LinGroup) *LinUserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luu.RemoveLinGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LinUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	luu.defaults()
	if len(luu.hooks) == 0 {
		affected, err = luu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luu.mutation = mutation
			affected, err = luu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(luu.hooks) - 1; i >= 0; i-- {
			if luu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = luu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LinUserUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LinUserUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LinUserUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luu *LinUserUpdate) defaults() {
	if _, ok := luu.mutation.UpdateTime(); !ok {
		v := linuser.UpdateDefaultUpdateTime()
		luu.mutation.SetUpdateTime(v)
	}
}

func (luu *LinUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linuser.Table,
			Columns: linuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuser.FieldID,
			},
		},
	}
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuser.FieldUpdateTime,
		})
	}
	if value, ok := luu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuser.FieldDeleteTime,
		})
	}
	if luu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: linuser.FieldDeleteTime,
		})
	}
	if value, ok := luu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldUsername,
		})
	}
	if value, ok := luu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldNickname,
		})
	}
	if value, ok := luu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldAvatar,
		})
	}
	if value, ok := luu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldEmail,
		})
	}
	if luu.mutation.LinUserIdentiyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.RemovedLinUserIdentiyIDs(); len(nodes) > 0 && !luu.mutation.LinUserIdentiyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.LinUserIdentiyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luu.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.RemovedLinGroupIDs(); len(nodes) > 0 && !luu.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.LinGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinUserUpdateOne is the builder for updating a single LinUser entity.
type LinUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinUserMutation
}

// SetUpdateTime sets the "update_time" field.
func (luuo *LinUserUpdateOne) SetUpdateTime(t time.Time) *LinUserUpdateOne {
	luuo.mutation.SetUpdateTime(t)
	return luuo
}

// SetDeleteTime sets the "delete_time" field.
func (luuo *LinUserUpdateOne) SetDeleteTime(t time.Time) *LinUserUpdateOne {
	luuo.mutation.SetDeleteTime(t)
	return luuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (luuo *LinUserUpdateOne) SetNillableDeleteTime(t *time.Time) *LinUserUpdateOne {
	if t != nil {
		luuo.SetDeleteTime(*t)
	}
	return luuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (luuo *LinUserUpdateOne) ClearDeleteTime() *LinUserUpdateOne {
	luuo.mutation.ClearDeleteTime()
	return luuo
}

// SetUsername sets the "username" field.
func (luuo *LinUserUpdateOne) SetUsername(s string) *LinUserUpdateOne {
	luuo.mutation.SetUsername(s)
	return luuo
}

// SetNickname sets the "nickname" field.
func (luuo *LinUserUpdateOne) SetNickname(s string) *LinUserUpdateOne {
	luuo.mutation.SetNickname(s)
	return luuo
}

// SetAvatar sets the "avatar" field.
func (luuo *LinUserUpdateOne) SetAvatar(s string) *LinUserUpdateOne {
	luuo.mutation.SetAvatar(s)
	return luuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (luuo *LinUserUpdateOne) SetNillableAvatar(s *string) *LinUserUpdateOne {
	if s != nil {
		luuo.SetAvatar(*s)
	}
	return luuo
}

// SetEmail sets the "email" field.
func (luuo *LinUserUpdateOne) SetEmail(s string) *LinUserUpdateOne {
	luuo.mutation.SetEmail(s)
	return luuo
}

// AddLinUserIdentiyIDs adds the "lin_user_identiy" edge to the LinUserIdentiy entity by IDs.
func (luuo *LinUserUpdateOne) AddLinUserIdentiyIDs(ids ...int) *LinUserUpdateOne {
	luuo.mutation.AddLinUserIdentiyIDs(ids...)
	return luuo
}

// AddLinUserIdentiy adds the "lin_user_identiy" edges to the LinUserIdentiy entity.
func (luuo *LinUserUpdateOne) AddLinUserIdentiy(l ...*LinUserIdentiy) *LinUserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luuo.AddLinUserIdentiyIDs(ids...)
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by IDs.
func (luuo *LinUserUpdateOne) AddLinGroupIDs(ids ...int) *LinUserUpdateOne {
	luuo.mutation.AddLinGroupIDs(ids...)
	return luuo
}

// AddLinGroup adds the "lin_group" edges to the LinGroup entity.
func (luuo *LinUserUpdateOne) AddLinGroup(l ...*LinGroup) *LinUserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luuo.AddLinGroupIDs(ids...)
}

// Mutation returns the LinUserMutation object of the builder.
func (luuo *LinUserUpdateOne) Mutation() *LinUserMutation {
	return luuo.mutation
}

// ClearLinUserIdentiy clears all "lin_user_identiy" edges to the LinUserIdentiy entity.
func (luuo *LinUserUpdateOne) ClearLinUserIdentiy() *LinUserUpdateOne {
	luuo.mutation.ClearLinUserIdentiy()
	return luuo
}

// RemoveLinUserIdentiyIDs removes the "lin_user_identiy" edge to LinUserIdentiy entities by IDs.
func (luuo *LinUserUpdateOne) RemoveLinUserIdentiyIDs(ids ...int) *LinUserUpdateOne {
	luuo.mutation.RemoveLinUserIdentiyIDs(ids...)
	return luuo
}

// RemoveLinUserIdentiy removes "lin_user_identiy" edges to LinUserIdentiy entities.
func (luuo *LinUserUpdateOne) RemoveLinUserIdentiy(l ...*LinUserIdentiy) *LinUserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luuo.RemoveLinUserIdentiyIDs(ids...)
}

// ClearLinGroup clears all "lin_group" edges to the LinGroup entity.
func (luuo *LinUserUpdateOne) ClearLinGroup() *LinUserUpdateOne {
	luuo.mutation.ClearLinGroup()
	return luuo
}

// RemoveLinGroupIDs removes the "lin_group" edge to LinGroup entities by IDs.
func (luuo *LinUserUpdateOne) RemoveLinGroupIDs(ids ...int) *LinUserUpdateOne {
	luuo.mutation.RemoveLinGroupIDs(ids...)
	return luuo
}

// RemoveLinGroup removes "lin_group" edges to LinGroup entities.
func (luuo *LinUserUpdateOne) RemoveLinGroup(l ...*LinGroup) *LinUserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luuo.RemoveLinGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LinUserUpdateOne) Select(field string, fields ...string) *LinUserUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LinUser entity.
func (luuo *LinUserUpdateOne) Save(ctx context.Context) (*LinUser, error) {
	var (
		err  error
		node *LinUser
	)
	luuo.defaults()
	if len(luuo.hooks) == 0 {
		node, err = luuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luuo.mutation = mutation
			node, err = luuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luuo.hooks) - 1; i >= 0; i-- {
			if luuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = luuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LinUserUpdateOne) SaveX(ctx context.Context) *LinUser {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LinUserUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LinUserUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luuo *LinUserUpdateOne) defaults() {
	if _, ok := luuo.mutation.UpdateTime(); !ok {
		v := linuser.UpdateDefaultUpdateTime()
		luuo.mutation.SetUpdateTime(v)
	}
}

func (luuo *LinUserUpdateOne) sqlSave(ctx context.Context) (_node *LinUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linuser.Table,
			Columns: linuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuser.FieldID,
			},
		},
	}
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linuser.FieldID)
		for _, f := range fields {
			if !linuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != linuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuser.FieldUpdateTime,
		})
	}
	if value, ok := luuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuser.FieldDeleteTime,
		})
	}
	if luuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: linuser.FieldDeleteTime,
		})
	}
	if value, ok := luuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldUsername,
		})
	}
	if value, ok := luuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldNickname,
		})
	}
	if value, ok := luuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldAvatar,
		})
	}
	if value, ok := luuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuser.FieldEmail,
		})
	}
	if luuo.mutation.LinUserIdentiyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.RemovedLinUserIdentiyIDs(); len(nodes) > 0 && !luuo.mutation.LinUserIdentiyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.LinUserIdentiyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linuser.LinUserIdentiyTable,
			Columns: []string{linuser.LinUserIdentiyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: linuseridentiy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luuo.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.RemovedLinGroupIDs(); len(nodes) > 0 && !luuo.mutation.LinGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.LinGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   linuser.LinGroupTable,
			Columns: linuser.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LinUser{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
