// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"lin-cms-go/internal/data/model/lingroup"
	"lin-cms-go/internal/data/model/linpermission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinPermissionCreate is the builder for creating a LinPermission entity.
type LinPermissionCreate struct {
	config
	mutation *LinPermissionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lpc *LinPermissionCreate) SetName(s string) *LinPermissionCreate {
	lpc.mutation.SetName(s)
	return lpc
}

// SetModule sets the "module" field.
func (lpc *LinPermissionCreate) SetModule(s string) *LinPermissionCreate {
	lpc.mutation.SetModule(s)
	return lpc
}

// SetMount sets the "mount" field.
func (lpc *LinPermissionCreate) SetMount(i int8) *LinPermissionCreate {
	lpc.mutation.SetMount(i)
	return lpc
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by IDs.
func (lpc *LinPermissionCreate) AddLinGroupIDs(ids ...int) *LinPermissionCreate {
	lpc.mutation.AddLinGroupIDs(ids...)
	return lpc
}

// AddLinGroup adds the "lin_group" edges to the LinGroup entity.
func (lpc *LinPermissionCreate) AddLinGroup(l ...*LinGroup) *LinPermissionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpc.AddLinGroupIDs(ids...)
}

// Mutation returns the LinPermissionMutation object of the builder.
func (lpc *LinPermissionCreate) Mutation() *LinPermissionMutation {
	return lpc.mutation
}

// Save creates the LinPermission in the database.
func (lpc *LinPermissionCreate) Save(ctx context.Context) (*LinPermission, error) {
	var (
		err  error
		node *LinPermission
	)
	if len(lpc.hooks) == 0 {
		if err = lpc.check(); err != nil {
			return nil, err
		}
		node, err = lpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lpc.check(); err != nil {
				return nil, err
			}
			lpc.mutation = mutation
			if node, err = lpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lpc.hooks) - 1; i >= 0; i-- {
			if lpc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LinPermissionCreate) SaveX(ctx context.Context) *LinPermission {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LinPermissionCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LinPermissionCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LinPermissionCreate) check() error {
	if _, ok := lpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "name"`)}
	}
	if _, ok := lpc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`model: missing required field "module"`)}
	}
	if _, ok := lpc.mutation.Mount(); !ok {
		return &ValidationError{Name: "mount", err: errors.New(`model: missing required field "mount"`)}
	}
	return nil
}

func (lpc *LinPermissionCreate) sqlSave(ctx context.Context) (*LinPermission, error) {
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lpc *LinPermissionCreate) createSpec() (*LinPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &LinPermission{config: lpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: linpermission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linpermission.FieldID,
			},
		}
	)
	if value, ok := lpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldName,
		})
		_node.Name = value
	}
	if value, ok := lpc.mutation.Module(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linpermission.FieldModule,
		})
		_node.Module = value
	}
	if value, ok := lpc.mutation.Mount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linpermission.FieldMount,
		})
		_node.Mount = value
	}
	if nodes := lpc.mutation.LinGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   linpermission.LinGroupTable,
			Columns: linpermission.LinGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lingroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LinPermissionCreateBulk is the builder for creating many LinPermission entities in bulk.
type LinPermissionCreateBulk struct {
	config
	builders []*LinPermissionCreate
}

// Save creates the LinPermission entities in the database.
func (lpcb *LinPermissionCreateBulk) Save(ctx context.Context) ([]*LinPermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LinPermission, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LinPermissionCreateBulk) SaveX(ctx context.Context) []*LinPermission {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LinPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LinPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
