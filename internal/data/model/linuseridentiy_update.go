// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/linuseridentiy"
	"lin-cms-go/internal/data/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinUserIdentiyUpdate is the builder for updating LinUserIdentiy entities.
type LinUserIdentiyUpdate struct {
	config
	hooks    []Hook
	mutation *LinUserIdentiyMutation
}

// Where appends a list predicates to the LinUserIdentiyUpdate builder.
func (luiu *LinUserIdentiyUpdate) Where(ps ...predicate.LinUserIdentiy) *LinUserIdentiyUpdate {
	luiu.mutation.Where(ps...)
	return luiu
}

// SetUserID sets the "user_id" field.
func (luiu *LinUserIdentiyUpdate) SetUserID(i int) *LinUserIdentiyUpdate {
	luiu.mutation.ResetUserID()
	luiu.mutation.SetUserID(i)
	return luiu
}

// AddUserID adds i to the "user_id" field.
func (luiu *LinUserIdentiyUpdate) AddUserID(i int) *LinUserIdentiyUpdate {
	luiu.mutation.AddUserID(i)
	return luiu
}

// SetIdentityType sets the "identity_type" field.
func (luiu *LinUserIdentiyUpdate) SetIdentityType(s string) *LinUserIdentiyUpdate {
	luiu.mutation.SetIdentityType(s)
	return luiu
}

// SetIdentifier sets the "identifier" field.
func (luiu *LinUserIdentiyUpdate) SetIdentifier(s string) *LinUserIdentiyUpdate {
	luiu.mutation.SetIdentifier(s)
	return luiu
}

// SetCredential sets the "credential" field.
func (luiu *LinUserIdentiyUpdate) SetCredential(s string) *LinUserIdentiyUpdate {
	luiu.mutation.SetCredential(s)
	return luiu
}

// Mutation returns the LinUserIdentiyMutation object of the builder.
func (luiu *LinUserIdentiyUpdate) Mutation() *LinUserIdentiyMutation {
	return luiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luiu *LinUserIdentiyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(luiu.hooks) == 0 {
		affected, err = luiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinUserIdentiyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luiu.mutation = mutation
			affected, err = luiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(luiu.hooks) - 1; i >= 0; i-- {
			if luiu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = luiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (luiu *LinUserIdentiyUpdate) SaveX(ctx context.Context) int {
	affected, err := luiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luiu *LinUserIdentiyUpdate) Exec(ctx context.Context) error {
	_, err := luiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luiu *LinUserIdentiyUpdate) ExecX(ctx context.Context) {
	if err := luiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luiu *LinUserIdentiyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linuseridentiy.Table,
			Columns: linuseridentiy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuseridentiy.FieldID,
			},
		},
	}
	if ps := luiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luiu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linuseridentiy.FieldUserID,
		})
	}
	if value, ok := luiu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linuseridentiy.FieldUserID,
		})
	}
	if value, ok := luiu.mutation.IdentityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentityType,
		})
	}
	if value, ok := luiu.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentifier,
		})
	}
	if value, ok := luiu.mutation.Credential(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldCredential,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linuseridentiy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinUserIdentiyUpdateOne is the builder for updating a single LinUserIdentiy entity.
type LinUserIdentiyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinUserIdentiyMutation
}

// SetUserID sets the "user_id" field.
func (luiuo *LinUserIdentiyUpdateOne) SetUserID(i int) *LinUserIdentiyUpdateOne {
	luiuo.mutation.ResetUserID()
	luiuo.mutation.SetUserID(i)
	return luiuo
}

// AddUserID adds i to the "user_id" field.
func (luiuo *LinUserIdentiyUpdateOne) AddUserID(i int) *LinUserIdentiyUpdateOne {
	luiuo.mutation.AddUserID(i)
	return luiuo
}

// SetIdentityType sets the "identity_type" field.
func (luiuo *LinUserIdentiyUpdateOne) SetIdentityType(s string) *LinUserIdentiyUpdateOne {
	luiuo.mutation.SetIdentityType(s)
	return luiuo
}

// SetIdentifier sets the "identifier" field.
func (luiuo *LinUserIdentiyUpdateOne) SetIdentifier(s string) *LinUserIdentiyUpdateOne {
	luiuo.mutation.SetIdentifier(s)
	return luiuo
}

// SetCredential sets the "credential" field.
func (luiuo *LinUserIdentiyUpdateOne) SetCredential(s string) *LinUserIdentiyUpdateOne {
	luiuo.mutation.SetCredential(s)
	return luiuo
}

// Mutation returns the LinUserIdentiyMutation object of the builder.
func (luiuo *LinUserIdentiyUpdateOne) Mutation() *LinUserIdentiyMutation {
	return luiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luiuo *LinUserIdentiyUpdateOne) Select(field string, fields ...string) *LinUserIdentiyUpdateOne {
	luiuo.fields = append([]string{field}, fields...)
	return luiuo
}

// Save executes the query and returns the updated LinUserIdentiy entity.
func (luiuo *LinUserIdentiyUpdateOne) Save(ctx context.Context) (*LinUserIdentiy, error) {
	var (
		err  error
		node *LinUserIdentiy
	)
	if len(luiuo.hooks) == 0 {
		node, err = luiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinUserIdentiyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luiuo.mutation = mutation
			node, err = luiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luiuo.hooks) - 1; i >= 0; i-- {
			if luiuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = luiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luiuo *LinUserIdentiyUpdateOne) SaveX(ctx context.Context) *LinUserIdentiy {
	node, err := luiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luiuo *LinUserIdentiyUpdateOne) Exec(ctx context.Context) error {
	_, err := luiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luiuo *LinUserIdentiyUpdateOne) ExecX(ctx context.Context) {
	if err := luiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luiuo *LinUserIdentiyUpdateOne) sqlSave(ctx context.Context) (_node *LinUserIdentiy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linuseridentiy.Table,
			Columns: linuseridentiy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuseridentiy.FieldID,
			},
		},
	}
	id, ok := luiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinUserIdentiy.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linuseridentiy.FieldID)
		for _, f := range fields {
			if !linuseridentiy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != linuseridentiy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luiuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linuseridentiy.FieldUserID,
		})
	}
	if value, ok := luiuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linuseridentiy.FieldUserID,
		})
	}
	if value, ok := luiuo.mutation.IdentityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentityType,
		})
	}
	if value, ok := luiuo.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentifier,
		})
	}
	if value, ok := luiuo.mutation.Credential(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldCredential,
		})
	}
	_node = &LinUserIdentiy{config: luiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linuseridentiy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
