// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"lin-cms-go/internal/data/model/linuseridentiy"
	"lin-cms-go/internal/data/model/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinUserIdentiyQuery is the builder for querying LinUserIdentiy entities.
type LinUserIdentiyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.LinUserIdentiy
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LinUserIdentiyQuery builder.
func (luiq *LinUserIdentiyQuery) Where(ps ...predicate.LinUserIdentiy) *LinUserIdentiyQuery {
	luiq.predicates = append(luiq.predicates, ps...)
	return luiq
}

// Limit adds a limit step to the query.
func (luiq *LinUserIdentiyQuery) Limit(limit int) *LinUserIdentiyQuery {
	luiq.limit = &limit
	return luiq
}

// Offset adds an offset step to the query.
func (luiq *LinUserIdentiyQuery) Offset(offset int) *LinUserIdentiyQuery {
	luiq.offset = &offset
	return luiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (luiq *LinUserIdentiyQuery) Unique(unique bool) *LinUserIdentiyQuery {
	luiq.unique = &unique
	return luiq
}

// Order adds an order step to the query.
func (luiq *LinUserIdentiyQuery) Order(o ...OrderFunc) *LinUserIdentiyQuery {
	luiq.order = append(luiq.order, o...)
	return luiq
}

// First returns the first LinUserIdentiy entity from the query.
// Returns a *NotFoundError when no LinUserIdentiy was found.
func (luiq *LinUserIdentiyQuery) First(ctx context.Context) (*LinUserIdentiy, error) {
	nodes, err := luiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{linuseridentiy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) FirstX(ctx context.Context) *LinUserIdentiy {
	node, err := luiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LinUserIdentiy ID from the query.
// Returns a *NotFoundError when no LinUserIdentiy ID was found.
func (luiq *LinUserIdentiyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = luiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{linuseridentiy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) FirstIDX(ctx context.Context) int {
	id, err := luiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Last returns the last LinUserIdentiy entity from the query.
// Returns a *NotFoundError when no LinUserIdentiy was found.
func (luiq *LinUserIdentiyQuery) Last(ctx context.Context) (*LinUserIdentiy, error) {
	nodes, err := luiq.All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{linuseridentiy.Label}
	}
	return nodes[len(nodes)-1], nil
}

// LastX is like Last, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) LastX(ctx context.Context) *LinUserIdentiy {
	node, err := luiq.Last(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// LastID returns the last LinUserIdentiy ID from the query.
// Returns a *NotFoundError when no LinUserIdentiy ID was found.
func (luiq *LinUserIdentiyQuery) LastID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = luiq.IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{linuseridentiy.Label}
		return
	}
	return ids[len(ids)-1], nil
}

// LastIDX is like LastID, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) LastIDX(ctx context.Context) int {
	id, err := luiq.LastID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LinUserIdentiy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one LinUserIdentiy entity is not found.
// Returns a *NotFoundError when no LinUserIdentiy entities are found.
func (luiq *LinUserIdentiyQuery) Only(ctx context.Context) (*LinUserIdentiy, error) {
	nodes, err := luiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{linuseridentiy.Label}
	default:
		return nil, &NotSingularError{linuseridentiy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) OnlyX(ctx context.Context) *LinUserIdentiy {
	node, err := luiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LinUserIdentiy ID in the query.
// Returns a *NotSingularError when exactly one LinUserIdentiy ID is not found.
// Returns a *NotFoundError when no entities are found.
func (luiq *LinUserIdentiyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = luiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = &NotSingularError{linuseridentiy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) OnlyIDX(ctx context.Context) int {
	id, err := luiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LinUserIdentiys.
func (luiq *LinUserIdentiyQuery) All(ctx context.Context) ([]*LinUserIdentiy, error) {
	if err := luiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return luiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) AllX(ctx context.Context) []*LinUserIdentiy {
	nodes, err := luiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LinUserIdentiy IDs.
func (luiq *LinUserIdentiyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := luiq.Select(linuseridentiy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) IDsX(ctx context.Context) []int {
	ids, err := luiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (luiq *LinUserIdentiyQuery) Count(ctx context.Context) (int, error) {
	if err := luiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return luiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) CountX(ctx context.Context) int {
	count, err := luiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (luiq *LinUserIdentiyQuery) Exist(ctx context.Context) (bool, error) {
	if err := luiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return luiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (luiq *LinUserIdentiyQuery) ExistX(ctx context.Context) bool {
	exist, err := luiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LinUserIdentiyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (luiq *LinUserIdentiyQuery) Clone() *LinUserIdentiyQuery {
	if luiq == nil {
		return nil
	}
	return &LinUserIdentiyQuery{
		config:     luiq.config,
		limit:      luiq.limit,
		offset:     luiq.offset,
		order:      append([]OrderFunc{}, luiq.order...),
		predicates: append([]predicate.LinUserIdentiy{}, luiq.predicates...),
		// clone intermediate query.
		sql:  luiq.sql.Clone(),
		path: luiq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LinUserIdentiy.Query().
//		GroupBy(linuseridentiy.FieldUserID).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
//
func (luiq *LinUserIdentiyQuery) GroupBy(field string, fields ...string) *LinUserIdentiyGroupBy {
	group := &LinUserIdentiyGroupBy{config: luiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := luiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return luiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.LinUserIdentiy.Query().
//		Select(linuseridentiy.FieldUserID).
//		Scan(ctx, &v)
//
func (luiq *LinUserIdentiyQuery) Select(fields ...string) *LinUserIdentiySelect {
	luiq.fields = append(luiq.fields, fields...)
	return &LinUserIdentiySelect{LinUserIdentiyQuery: luiq}
}

func (luiq *LinUserIdentiyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range luiq.fields {
		if !linuseridentiy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if luiq.path != nil {
		prev, err := luiq.path(ctx)
		if err != nil {
			return err
		}
		luiq.sql = prev
	}
	return nil
}

func (luiq *LinUserIdentiyQuery) sqlAll(ctx context.Context) ([]*LinUserIdentiy, error) {
	var (
		nodes   = []*LinUserIdentiy{}
		withFKs = luiq.withFKs
		_spec   = luiq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, linuseridentiy.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &LinUserIdentiy{config: luiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("model: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, luiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (luiq *LinUserIdentiyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := luiq.querySpec()
	return sqlgraph.CountNodes(ctx, luiq.driver, _spec)
}

func (luiq *LinUserIdentiyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := luiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("model: check existence: %w", err)
	}
	return n > 0, nil
}

func (luiq *LinUserIdentiyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linuseridentiy.Table,
			Columns: linuseridentiy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuseridentiy.FieldID,
			},
		},
		From:   luiq.sql,
		Unique: true,
	}
	if unique := luiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := luiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linuseridentiy.FieldID)
		for i := range fields {
			if fields[i] != linuseridentiy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := luiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := luiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := luiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := luiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (luiq *LinUserIdentiyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(luiq.driver.Dialect())
	t1 := builder.Table(linuseridentiy.Table)
	columns := luiq.fields
	if len(columns) == 0 {
		columns = linuseridentiy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if luiq.sql != nil {
		selector = luiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range luiq.predicates {
		p(selector)
	}
	for _, p := range luiq.order {
		p(selector)
	}
	if offset := luiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := luiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LinUserIdentiyGroupBy is the group-by builder for LinUserIdentiy entities.
type LinUserIdentiyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (luigb *LinUserIdentiyGroupBy) Aggregate(fns ...AggregateFunc) *LinUserIdentiyGroupBy {
	luigb.fns = append(luigb.fns, fns...)
	return luigb
}

// Scan applies the group-by query and scans the result into the given value.
func (luigb *LinUserIdentiyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := luigb.path(ctx)
	if err != nil {
		return err
	}
	luigb.sql = query
	return luigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := luigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(luigb.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := luigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) StringsX(ctx context.Context) []string {
	v, err := luigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = luigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) StringX(ctx context.Context) string {
	v, err := luigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(luigb.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := luigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) IntsX(ctx context.Context) []int {
	v, err := luigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = luigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) IntX(ctx context.Context) int {
	v, err := luigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(luigb.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := luigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := luigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = luigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := luigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(luigb.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := luigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := luigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (luigb *LinUserIdentiyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = luigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (luigb *LinUserIdentiyGroupBy) BoolX(ctx context.Context) bool {
	v, err := luigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (luigb *LinUserIdentiyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range luigb.fields {
		if !linuseridentiy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := luigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := luigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (luigb *LinUserIdentiyGroupBy) sqlQuery() *sql.Selector {
	selector := luigb.sql.Select()
	aggregation := make([]string, 0, len(luigb.fns))
	for _, fn := range luigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(luigb.fields)+len(luigb.fns))
		for _, f := range luigb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(luigb.fields...)...)
}

// LinUserIdentiySelect is the builder for selecting fields of LinUserIdentiy entities.
type LinUserIdentiySelect struct {
	*LinUserIdentiyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (luis *LinUserIdentiySelect) Scan(ctx context.Context, v interface{}) error {
	if err := luis.prepareQuery(ctx); err != nil {
		return err
	}
	luis.sql = luis.LinUserIdentiyQuery.sqlQuery(ctx)
	return luis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (luis *LinUserIdentiySelect) ScanX(ctx context.Context, v interface{}) {
	if err := luis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Strings(ctx context.Context) ([]string, error) {
	if len(luis.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := luis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (luis *LinUserIdentiySelect) StringsX(ctx context.Context) []string {
	v, err := luis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = luis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (luis *LinUserIdentiySelect) StringX(ctx context.Context) string {
	v, err := luis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Ints(ctx context.Context) ([]int, error) {
	if len(luis.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := luis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (luis *LinUserIdentiySelect) IntsX(ctx context.Context) []int {
	v, err := luis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = luis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (luis *LinUserIdentiySelect) IntX(ctx context.Context) int {
	v, err := luis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(luis.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := luis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (luis *LinUserIdentiySelect) Float64sX(ctx context.Context) []float64 {
	v, err := luis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = luis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (luis *LinUserIdentiySelect) Float64X(ctx context.Context) float64 {
	v, err := luis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(luis.fields) > 1 {
		return nil, errors.New("model: LinUserIdentiySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := luis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (luis *LinUserIdentiySelect) BoolsX(ctx context.Context) []bool {
	v, err := luis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (luis *LinUserIdentiySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = luis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{linuseridentiy.Label}
	default:
		err = fmt.Errorf("model: LinUserIdentiySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (luis *LinUserIdentiySelect) BoolX(ctx context.Context) bool {
	v, err := luis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (luis *LinUserIdentiySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := luis.sql.Query()
	if err := luis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
