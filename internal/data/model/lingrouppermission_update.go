// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/lingrouppermission"
	"lin-cms-go/internal/data/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinGroupPermissionUpdate is the builder for updating LinGroupPermission entities.
type LinGroupPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *LinGroupPermissionMutation
}

// Where appends a list predicates to the LinGroupPermissionUpdate builder.
func (lgpu *LinGroupPermissionUpdate) Where(ps ...predicate.LinGroupPermission) *LinGroupPermissionUpdate {
	lgpu.mutation.Where(ps...)
	return lgpu
}

// SetGroupID sets the "group_id" field.
func (lgpu *LinGroupPermissionUpdate) SetGroupID(i int) *LinGroupPermissionUpdate {
	lgpu.mutation.ResetGroupID()
	lgpu.mutation.SetGroupID(i)
	return lgpu
}

// AddGroupID adds i to the "group_id" field.
func (lgpu *LinGroupPermissionUpdate) AddGroupID(i int) *LinGroupPermissionUpdate {
	lgpu.mutation.AddGroupID(i)
	return lgpu
}

// SetPermissionID sets the "permission_id" field.
func (lgpu *LinGroupPermissionUpdate) SetPermissionID(i int) *LinGroupPermissionUpdate {
	lgpu.mutation.ResetPermissionID()
	lgpu.mutation.SetPermissionID(i)
	return lgpu
}

// AddPermissionID adds i to the "permission_id" field.
func (lgpu *LinGroupPermissionUpdate) AddPermissionID(i int) *LinGroupPermissionUpdate {
	lgpu.mutation.AddPermissionID(i)
	return lgpu
}

// Mutation returns the LinGroupPermissionMutation object of the builder.
func (lgpu *LinGroupPermissionUpdate) Mutation() *LinGroupPermissionMutation {
	return lgpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lgpu *LinGroupPermissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lgpu.hooks) == 0 {
		affected, err = lgpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinGroupPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lgpu.mutation = mutation
			affected, err = lgpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lgpu.hooks) - 1; i >= 0; i-- {
			if lgpu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lgpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lgpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lgpu *LinGroupPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := lgpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lgpu *LinGroupPermissionUpdate) Exec(ctx context.Context) error {
	_, err := lgpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgpu *LinGroupPermissionUpdate) ExecX(ctx context.Context) {
	if err := lgpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lgpu *LinGroupPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lingrouppermission.Table,
			Columns: lingrouppermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lingrouppermission.FieldID,
			},
		},
	}
	if ps := lgpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lgpu.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldGroupID,
		})
	}
	if value, ok := lgpu.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldGroupID,
		})
	}
	if value, ok := lgpu.mutation.PermissionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldPermissionID,
		})
	}
	if value, ok := lgpu.mutation.AddedPermissionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldPermissionID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lgpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lingrouppermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinGroupPermissionUpdateOne is the builder for updating a single LinGroupPermission entity.
type LinGroupPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinGroupPermissionMutation
}

// SetGroupID sets the "group_id" field.
func (lgpuo *LinGroupPermissionUpdateOne) SetGroupID(i int) *LinGroupPermissionUpdateOne {
	lgpuo.mutation.ResetGroupID()
	lgpuo.mutation.SetGroupID(i)
	return lgpuo
}

// AddGroupID adds i to the "group_id" field.
func (lgpuo *LinGroupPermissionUpdateOne) AddGroupID(i int) *LinGroupPermissionUpdateOne {
	lgpuo.mutation.AddGroupID(i)
	return lgpuo
}

// SetPermissionID sets the "permission_id" field.
func (lgpuo *LinGroupPermissionUpdateOne) SetPermissionID(i int) *LinGroupPermissionUpdateOne {
	lgpuo.mutation.ResetPermissionID()
	lgpuo.mutation.SetPermissionID(i)
	return lgpuo
}

// AddPermissionID adds i to the "permission_id" field.
func (lgpuo *LinGroupPermissionUpdateOne) AddPermissionID(i int) *LinGroupPermissionUpdateOne {
	lgpuo.mutation.AddPermissionID(i)
	return lgpuo
}

// Mutation returns the LinGroupPermissionMutation object of the builder.
func (lgpuo *LinGroupPermissionUpdateOne) Mutation() *LinGroupPermissionMutation {
	return lgpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lgpuo *LinGroupPermissionUpdateOne) Select(field string, fields ...string) *LinGroupPermissionUpdateOne {
	lgpuo.fields = append([]string{field}, fields...)
	return lgpuo
}

// Save executes the query and returns the updated LinGroupPermission entity.
func (lgpuo *LinGroupPermissionUpdateOne) Save(ctx context.Context) (*LinGroupPermission, error) {
	var (
		err  error
		node *LinGroupPermission
	)
	if len(lgpuo.hooks) == 0 {
		node, err = lgpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinGroupPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lgpuo.mutation = mutation
			node, err = lgpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lgpuo.hooks) - 1; i >= 0; i-- {
			if lgpuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lgpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lgpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lgpuo *LinGroupPermissionUpdateOne) SaveX(ctx context.Context) *LinGroupPermission {
	node, err := lgpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lgpuo *LinGroupPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := lgpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgpuo *LinGroupPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := lgpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lgpuo *LinGroupPermissionUpdateOne) sqlSave(ctx context.Context) (_node *LinGroupPermission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lingrouppermission.Table,
			Columns: lingrouppermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lingrouppermission.FieldID,
			},
		},
	}
	id, ok := lgpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinGroupPermission.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lgpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lingrouppermission.FieldID)
		for _, f := range fields {
			if !lingrouppermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != lingrouppermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lgpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lgpuo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldGroupID,
		})
	}
	if value, ok := lgpuo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldGroupID,
		})
	}
	if value, ok := lgpuo.mutation.PermissionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldPermissionID,
		})
	}
	if value, ok := lgpuo.mutation.AddedPermissionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldPermissionID,
		})
	}
	_node = &LinGroupPermission{config: lgpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lgpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lingrouppermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
