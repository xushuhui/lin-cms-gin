// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/linlog"
	"lin-cms-go/internal/data/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinLogUpdate is the builder for updating LinLog entities.
type LinLogUpdate struct {
	config
	hooks    []Hook
	mutation *LinLogMutation
}

// Where appends a list predicates to the LinLogUpdate builder.
func (llu *LinLogUpdate) Where(ps ...predicate.LinLog) *LinLogUpdate {
	llu.mutation.Where(ps...)
	return llu
}

// SetUpdateTime sets the "update_time" field.
func (llu *LinLogUpdate) SetUpdateTime(t time.Time) *LinLogUpdate {
	llu.mutation.SetUpdateTime(t)
	return llu
}

// SetDeleteTime sets the "delete_time" field.
func (llu *LinLogUpdate) SetDeleteTime(t time.Time) *LinLogUpdate {
	llu.mutation.SetDeleteTime(t)
	return llu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (llu *LinLogUpdate) SetNillableDeleteTime(t *time.Time) *LinLogUpdate {
	if t != nil {
		llu.SetDeleteTime(*t)
	}
	return llu
}

// SetMessage sets the "message" field.
func (llu *LinLogUpdate) SetMessage(s string) *LinLogUpdate {
	llu.mutation.SetMessage(s)
	return llu
}

// SetUserID sets the "user_id" field.
func (llu *LinLogUpdate) SetUserID(i int) *LinLogUpdate {
	llu.mutation.ResetUserID()
	llu.mutation.SetUserID(i)
	return llu
}

// AddUserID adds i to the "user_id" field.
func (llu *LinLogUpdate) AddUserID(i int) *LinLogUpdate {
	llu.mutation.AddUserID(i)
	return llu
}

// SetUsername sets the "username" field.
func (llu *LinLogUpdate) SetUsername(s string) *LinLogUpdate {
	llu.mutation.SetUsername(s)
	return llu
}

// SetStatusCode sets the "status_code" field.
func (llu *LinLogUpdate) SetStatusCode(i int) *LinLogUpdate {
	llu.mutation.ResetStatusCode()
	llu.mutation.SetStatusCode(i)
	return llu
}

// AddStatusCode adds i to the "status_code" field.
func (llu *LinLogUpdate) AddStatusCode(i int) *LinLogUpdate {
	llu.mutation.AddStatusCode(i)
	return llu
}

// SetMethod sets the "method" field.
func (llu *LinLogUpdate) SetMethod(s string) *LinLogUpdate {
	llu.mutation.SetMethod(s)
	return llu
}

// SetPath sets the "path" field.
func (llu *LinLogUpdate) SetPath(s string) *LinLogUpdate {
	llu.mutation.SetPath(s)
	return llu
}

// SetPermission sets the "permission" field.
func (llu *LinLogUpdate) SetPermission(s string) *LinLogUpdate {
	llu.mutation.SetPermission(s)
	return llu
}

// Mutation returns the LinLogMutation object of the builder.
func (llu *LinLogUpdate) Mutation() *LinLogMutation {
	return llu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (llu *LinLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	llu.defaults()
	if len(llu.hooks) == 0 {
		affected, err = llu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			llu.mutation = mutation
			affected, err = llu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(llu.hooks) - 1; i >= 0; i-- {
			if llu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = llu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, llu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (llu *LinLogUpdate) SaveX(ctx context.Context) int {
	affected, err := llu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (llu *LinLogUpdate) Exec(ctx context.Context) error {
	_, err := llu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llu *LinLogUpdate) ExecX(ctx context.Context) {
	if err := llu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llu *LinLogUpdate) defaults() {
	if _, ok := llu.mutation.UpdateTime(); !ok {
		v := linlog.UpdateDefaultUpdateTime()
		llu.mutation.SetUpdateTime(v)
	}
}

func (llu *LinLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linlog.Table,
			Columns: linlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linlog.FieldID,
			},
		},
	}
	if ps := llu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := llu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linlog.FieldUpdateTime,
		})
	}
	if value, ok := llu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linlog.FieldDeleteTime,
		})
	}
	if value, ok := llu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldMessage,
		})
	}
	if value, ok := llu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldUserID,
		})
	}
	if value, ok := llu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldUserID,
		})
	}
	if value, ok := llu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldUsername,
		})
	}
	if value, ok := llu.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldStatusCode,
		})
	}
	if value, ok := llu.mutation.AddedStatusCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldStatusCode,
		})
	}
	if value, ok := llu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldMethod,
		})
	}
	if value, ok := llu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldPath,
		})
	}
	if value, ok := llu.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldPermission,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, llu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinLogUpdateOne is the builder for updating a single LinLog entity.
type LinLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinLogMutation
}

// SetUpdateTime sets the "update_time" field.
func (lluo *LinLogUpdateOne) SetUpdateTime(t time.Time) *LinLogUpdateOne {
	lluo.mutation.SetUpdateTime(t)
	return lluo
}

// SetDeleteTime sets the "delete_time" field.
func (lluo *LinLogUpdateOne) SetDeleteTime(t time.Time) *LinLogUpdateOne {
	lluo.mutation.SetDeleteTime(t)
	return lluo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (lluo *LinLogUpdateOne) SetNillableDeleteTime(t *time.Time) *LinLogUpdateOne {
	if t != nil {
		lluo.SetDeleteTime(*t)
	}
	return lluo
}

// SetMessage sets the "message" field.
func (lluo *LinLogUpdateOne) SetMessage(s string) *LinLogUpdateOne {
	lluo.mutation.SetMessage(s)
	return lluo
}

// SetUserID sets the "user_id" field.
func (lluo *LinLogUpdateOne) SetUserID(i int) *LinLogUpdateOne {
	lluo.mutation.ResetUserID()
	lluo.mutation.SetUserID(i)
	return lluo
}

// AddUserID adds i to the "user_id" field.
func (lluo *LinLogUpdateOne) AddUserID(i int) *LinLogUpdateOne {
	lluo.mutation.AddUserID(i)
	return lluo
}

// SetUsername sets the "username" field.
func (lluo *LinLogUpdateOne) SetUsername(s string) *LinLogUpdateOne {
	lluo.mutation.SetUsername(s)
	return lluo
}

// SetStatusCode sets the "status_code" field.
func (lluo *LinLogUpdateOne) SetStatusCode(i int) *LinLogUpdateOne {
	lluo.mutation.ResetStatusCode()
	lluo.mutation.SetStatusCode(i)
	return lluo
}

// AddStatusCode adds i to the "status_code" field.
func (lluo *LinLogUpdateOne) AddStatusCode(i int) *LinLogUpdateOne {
	lluo.mutation.AddStatusCode(i)
	return lluo
}

// SetMethod sets the "method" field.
func (lluo *LinLogUpdateOne) SetMethod(s string) *LinLogUpdateOne {
	lluo.mutation.SetMethod(s)
	return lluo
}

// SetPath sets the "path" field.
func (lluo *LinLogUpdateOne) SetPath(s string) *LinLogUpdateOne {
	lluo.mutation.SetPath(s)
	return lluo
}

// SetPermission sets the "permission" field.
func (lluo *LinLogUpdateOne) SetPermission(s string) *LinLogUpdateOne {
	lluo.mutation.SetPermission(s)
	return lluo
}

// Mutation returns the LinLogMutation object of the builder.
func (lluo *LinLogUpdateOne) Mutation() *LinLogMutation {
	return lluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lluo *LinLogUpdateOne) Select(field string, fields ...string) *LinLogUpdateOne {
	lluo.fields = append([]string{field}, fields...)
	return lluo
}

// Save executes the query and returns the updated LinLog entity.
func (lluo *LinLogUpdateOne) Save(ctx context.Context) (*LinLog, error) {
	var (
		err  error
		node *LinLog
	)
	lluo.defaults()
	if len(lluo.hooks) == 0 {
		node, err = lluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lluo.mutation = mutation
			node, err = lluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lluo.hooks) - 1; i >= 0; i-- {
			if lluo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lluo *LinLogUpdateOne) SaveX(ctx context.Context) *LinLog {
	node, err := lluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lluo *LinLogUpdateOne) Exec(ctx context.Context) error {
	_, err := lluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lluo *LinLogUpdateOne) ExecX(ctx context.Context) {
	if err := lluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lluo *LinLogUpdateOne) defaults() {
	if _, ok := lluo.mutation.UpdateTime(); !ok {
		v := linlog.UpdateDefaultUpdateTime()
		lluo.mutation.SetUpdateTime(v)
	}
}

func (lluo *LinLogUpdateOne) sqlSave(ctx context.Context) (_node *LinLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linlog.Table,
			Columns: linlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linlog.FieldID,
			},
		},
	}
	id, ok := lluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linlog.FieldID)
		for _, f := range fields {
			if !linlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != linlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linlog.FieldUpdateTime,
		})
	}
	if value, ok := lluo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linlog.FieldDeleteTime,
		})
	}
	if value, ok := lluo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldMessage,
		})
	}
	if value, ok := lluo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldUserID,
		})
	}
	if value, ok := lluo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldUserID,
		})
	}
	if value, ok := lluo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldUsername,
		})
	}
	if value, ok := lluo.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldStatusCode,
		})
	}
	if value, ok := lluo.mutation.AddedStatusCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linlog.FieldStatusCode,
		})
	}
	if value, ok := lluo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldMethod,
		})
	}
	if value, ok := lluo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldPath,
		})
	}
	if value, ok := lluo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linlog.FieldPermission,
		})
	}
	_node = &LinLog{config: lluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
