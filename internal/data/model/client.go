// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"lin-cms-go/internal/data/model/migrate"

	"lin-cms-go/internal/data/model/book"
	"lin-cms-go/internal/data/model/linfile"
	"lin-cms-go/internal/data/model/lingroup"
	"lin-cms-go/internal/data/model/lingrouppermission"
	"lin-cms-go/internal/data/model/linlog"
	"lin-cms-go/internal/data/model/linpermission"
	"lin-cms-go/internal/data/model/linuser"
	"lin-cms-go/internal/data/model/linuseridentiy"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Book is the client for interacting with the Book builders.
	Book *BookClient
	// LinFile is the client for interacting with the LinFile builders.
	LinFile *LinFileClient
	// LinGroup is the client for interacting with the LinGroup builders.
	LinGroup *LinGroupClient
	// LinGroupPermission is the client for interacting with the LinGroupPermission builders.
	LinGroupPermission *LinGroupPermissionClient
	// LinLog is the client for interacting with the LinLog builders.
	LinLog *LinLogClient
	// LinPermission is the client for interacting with the LinPermission builders.
	LinPermission *LinPermissionClient
	// LinUser is the client for interacting with the LinUser builders.
	LinUser *LinUserClient
	// LinUserIdentiy is the client for interacting with the LinUserIdentiy builders.
	LinUserIdentiy *LinUserIdentiyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Book = NewBookClient(c.config)
	c.LinFile = NewLinFileClient(c.config)
	c.LinGroup = NewLinGroupClient(c.config)
	c.LinGroupPermission = NewLinGroupPermissionClient(c.config)
	c.LinLog = NewLinLogClient(c.config)
	c.LinPermission = NewLinPermissionClient(c.config)
	c.LinUser = NewLinUserClient(c.config)
	c.LinUserIdentiy = NewLinUserIdentiyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Book:               NewBookClient(cfg),
		LinFile:            NewLinFileClient(cfg),
		LinGroup:           NewLinGroupClient(cfg),
		LinGroupPermission: NewLinGroupPermissionClient(cfg),
		LinLog:             NewLinLogClient(cfg),
		LinPermission:      NewLinPermissionClient(cfg),
		LinUser:            NewLinUserClient(cfg),
		LinUserIdentiy:     NewLinUserIdentiyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:             cfg,
		Book:               NewBookClient(cfg),
		LinFile:            NewLinFileClient(cfg),
		LinGroup:           NewLinGroupClient(cfg),
		LinGroupPermission: NewLinGroupPermissionClient(cfg),
		LinLog:             NewLinLogClient(cfg),
		LinPermission:      NewLinPermissionClient(cfg),
		LinUser:            NewLinUserClient(cfg),
		LinUserIdentiy:     NewLinUserIdentiyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Book.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Book.Use(hooks...)
	c.LinFile.Use(hooks...)
	c.LinGroup.Use(hooks...)
	c.LinGroupPermission.Use(hooks...)
	c.LinLog.Use(hooks...)
	c.LinPermission.Use(hooks...)
	c.LinUser.Use(hooks...)
	c.LinUserIdentiy.Use(hooks...)
}

// BookClient is a client for the Book schema.
type BookClient struct {
	config
}

// NewBookClient returns a client for the Book from the given config.
func NewBookClient(c config) *BookClient {
	return &BookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `book.Hooks(f(g(h())))`.
func (c *BookClient) Use(hooks ...Hook) {
	c.hooks.Book = append(c.hooks.Book, hooks...)
}

// Create returns a create builder for Book.
func (c *BookClient) Create() *BookCreate {
	mutation := newBookMutation(c.config, OpCreate)
	return &BookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Book entities.
func (c *BookClient) CreateBulk(builders ...*BookCreate) *BookCreateBulk {
	return &BookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Book.
func (c *BookClient) Update() *BookUpdate {
	mutation := newBookMutation(c.config, OpUpdate)
	return &BookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookClient) UpdateOne(b *Book) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBook(b))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookClient) UpdateOneID(id int) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBookID(id))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Book.
func (c *BookClient) Delete() *BookDelete {
	mutation := newBookMutation(c.config, OpDelete)
	return &BookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookClient) DeleteOne(b *Book) *BookDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookClient) DeleteOneID(id int) *BookDeleteOne {
	builder := c.Delete().Where(book.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookDeleteOne{builder}
}

// Query returns a query builder for Book.
func (c *BookClient) Query() *BookQuery {
	return &BookQuery{
		config: c.config,
	}
}

// Get returns a Book entity by its id.
func (c *BookClient) Get(ctx context.Context, id int) (*Book, error) {
	return c.Query().Where(book.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookClient) GetX(ctx context.Context, id int) *Book {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BookClient) Hooks() []Hook {
	return c.hooks.Book
}

// LinFileClient is a client for the LinFile schema.
type LinFileClient struct {
	config
}

// NewLinFileClient returns a client for the LinFile from the given config.
func NewLinFileClient(c config) *LinFileClient {
	return &LinFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linfile.Hooks(f(g(h())))`.
func (c *LinFileClient) Use(hooks ...Hook) {
	c.hooks.LinFile = append(c.hooks.LinFile, hooks...)
}

// Create returns a create builder for LinFile.
func (c *LinFileClient) Create() *LinFileCreate {
	mutation := newLinFileMutation(c.config, OpCreate)
	return &LinFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinFile entities.
func (c *LinFileClient) CreateBulk(builders ...*LinFileCreate) *LinFileCreateBulk {
	return &LinFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinFile.
func (c *LinFileClient) Update() *LinFileUpdate {
	mutation := newLinFileMutation(c.config, OpUpdate)
	return &LinFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinFileClient) UpdateOne(lf *LinFile) *LinFileUpdateOne {
	mutation := newLinFileMutation(c.config, OpUpdateOne, withLinFile(lf))
	return &LinFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinFileClient) UpdateOneID(id int) *LinFileUpdateOne {
	mutation := newLinFileMutation(c.config, OpUpdateOne, withLinFileID(id))
	return &LinFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinFile.
func (c *LinFileClient) Delete() *LinFileDelete {
	mutation := newLinFileMutation(c.config, OpDelete)
	return &LinFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinFileClient) DeleteOne(lf *LinFile) *LinFileDeleteOne {
	return c.DeleteOneID(lf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinFileClient) DeleteOneID(id int) *LinFileDeleteOne {
	builder := c.Delete().Where(linfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinFileDeleteOne{builder}
}

// Query returns a query builder for LinFile.
func (c *LinFileClient) Query() *LinFileQuery {
	return &LinFileQuery{
		config: c.config,
	}
}

// Get returns a LinFile entity by its id.
func (c *LinFileClient) Get(ctx context.Context, id int) (*LinFile, error) {
	return c.Query().Where(linfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinFileClient) GetX(ctx context.Context, id int) *LinFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LinFileClient) Hooks() []Hook {
	return c.hooks.LinFile
}

// LinGroupClient is a client for the LinGroup schema.
type LinGroupClient struct {
	config
}

// NewLinGroupClient returns a client for the LinGroup from the given config.
func NewLinGroupClient(c config) *LinGroupClient {
	return &LinGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lingroup.Hooks(f(g(h())))`.
func (c *LinGroupClient) Use(hooks ...Hook) {
	c.hooks.LinGroup = append(c.hooks.LinGroup, hooks...)
}

// Create returns a create builder for LinGroup.
func (c *LinGroupClient) Create() *LinGroupCreate {
	mutation := newLinGroupMutation(c.config, OpCreate)
	return &LinGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinGroup entities.
func (c *LinGroupClient) CreateBulk(builders ...*LinGroupCreate) *LinGroupCreateBulk {
	return &LinGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinGroup.
func (c *LinGroupClient) Update() *LinGroupUpdate {
	mutation := newLinGroupMutation(c.config, OpUpdate)
	return &LinGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinGroupClient) UpdateOne(lg *LinGroup) *LinGroupUpdateOne {
	mutation := newLinGroupMutation(c.config, OpUpdateOne, withLinGroup(lg))
	return &LinGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinGroupClient) UpdateOneID(id int) *LinGroupUpdateOne {
	mutation := newLinGroupMutation(c.config, OpUpdateOne, withLinGroupID(id))
	return &LinGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinGroup.
func (c *LinGroupClient) Delete() *LinGroupDelete {
	mutation := newLinGroupMutation(c.config, OpDelete)
	return &LinGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinGroupClient) DeleteOne(lg *LinGroup) *LinGroupDeleteOne {
	return c.DeleteOneID(lg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinGroupClient) DeleteOneID(id int) *LinGroupDeleteOne {
	builder := c.Delete().Where(lingroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinGroupDeleteOne{builder}
}

// Query returns a query builder for LinGroup.
func (c *LinGroupClient) Query() *LinGroupQuery {
	return &LinGroupQuery{
		config: c.config,
	}
}

// Get returns a LinGroup entity by its id.
func (c *LinGroupClient) Get(ctx context.Context, id int) (*LinGroup, error) {
	return c.Query().Where(lingroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinGroupClient) GetX(ctx context.Context, id int) *LinGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLinUser queries the lin_user edge of a LinGroup.
func (c *LinGroupClient) QueryLinUser(lg *LinGroup) *LinUserQuery {
	query := &LinUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lingroup.Table, lingroup.FieldID, id),
			sqlgraph.To(linuser.Table, linuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lingroup.LinUserTable, lingroup.LinUserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinPermission queries the lin_permission edge of a LinGroup.
func (c *LinGroupClient) QueryLinPermission(lg *LinGroup) *LinPermissionQuery {
	query := &LinPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lingroup.Table, lingroup.FieldID, id),
			sqlgraph.To(linpermission.Table, linpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, lingroup.LinPermissionTable, lingroup.LinPermissionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinGroupClient) Hooks() []Hook {
	return c.hooks.LinGroup
}

// LinGroupPermissionClient is a client for the LinGroupPermission schema.
type LinGroupPermissionClient struct {
	config
}

// NewLinGroupPermissionClient returns a client for the LinGroupPermission from the given config.
func NewLinGroupPermissionClient(c config) *LinGroupPermissionClient {
	return &LinGroupPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lingrouppermission.Hooks(f(g(h())))`.
func (c *LinGroupPermissionClient) Use(hooks ...Hook) {
	c.hooks.LinGroupPermission = append(c.hooks.LinGroupPermission, hooks...)
}

// Create returns a create builder for LinGroupPermission.
func (c *LinGroupPermissionClient) Create() *LinGroupPermissionCreate {
	mutation := newLinGroupPermissionMutation(c.config, OpCreate)
	return &LinGroupPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinGroupPermission entities.
func (c *LinGroupPermissionClient) CreateBulk(builders ...*LinGroupPermissionCreate) *LinGroupPermissionCreateBulk {
	return &LinGroupPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinGroupPermission.
func (c *LinGroupPermissionClient) Update() *LinGroupPermissionUpdate {
	mutation := newLinGroupPermissionMutation(c.config, OpUpdate)
	return &LinGroupPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinGroupPermissionClient) UpdateOne(lgp *LinGroupPermission) *LinGroupPermissionUpdateOne {
	mutation := newLinGroupPermissionMutation(c.config, OpUpdateOne, withLinGroupPermission(lgp))
	return &LinGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinGroupPermissionClient) UpdateOneID(id int) *LinGroupPermissionUpdateOne {
	mutation := newLinGroupPermissionMutation(c.config, OpUpdateOne, withLinGroupPermissionID(id))
	return &LinGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinGroupPermission.
func (c *LinGroupPermissionClient) Delete() *LinGroupPermissionDelete {
	mutation := newLinGroupPermissionMutation(c.config, OpDelete)
	return &LinGroupPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinGroupPermissionClient) DeleteOne(lgp *LinGroupPermission) *LinGroupPermissionDeleteOne {
	return c.DeleteOneID(lgp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinGroupPermissionClient) DeleteOneID(id int) *LinGroupPermissionDeleteOne {
	builder := c.Delete().Where(lingrouppermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinGroupPermissionDeleteOne{builder}
}

// Query returns a query builder for LinGroupPermission.
func (c *LinGroupPermissionClient) Query() *LinGroupPermissionQuery {
	return &LinGroupPermissionQuery{
		config: c.config,
	}
}

// Get returns a LinGroupPermission entity by its id.
func (c *LinGroupPermissionClient) Get(ctx context.Context, id int) (*LinGroupPermission, error) {
	return c.Query().Where(lingrouppermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinGroupPermissionClient) GetX(ctx context.Context, id int) *LinGroupPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LinGroupPermissionClient) Hooks() []Hook {
	return c.hooks.LinGroupPermission
}

// LinLogClient is a client for the LinLog schema.
type LinLogClient struct {
	config
}

// NewLinLogClient returns a client for the LinLog from the given config.
func NewLinLogClient(c config) *LinLogClient {
	return &LinLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linlog.Hooks(f(g(h())))`.
func (c *LinLogClient) Use(hooks ...Hook) {
	c.hooks.LinLog = append(c.hooks.LinLog, hooks...)
}

// Create returns a create builder for LinLog.
func (c *LinLogClient) Create() *LinLogCreate {
	mutation := newLinLogMutation(c.config, OpCreate)
	return &LinLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinLog entities.
func (c *LinLogClient) CreateBulk(builders ...*LinLogCreate) *LinLogCreateBulk {
	return &LinLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinLog.
func (c *LinLogClient) Update() *LinLogUpdate {
	mutation := newLinLogMutation(c.config, OpUpdate)
	return &LinLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinLogClient) UpdateOne(ll *LinLog) *LinLogUpdateOne {
	mutation := newLinLogMutation(c.config, OpUpdateOne, withLinLog(ll))
	return &LinLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinLogClient) UpdateOneID(id int) *LinLogUpdateOne {
	mutation := newLinLogMutation(c.config, OpUpdateOne, withLinLogID(id))
	return &LinLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinLog.
func (c *LinLogClient) Delete() *LinLogDelete {
	mutation := newLinLogMutation(c.config, OpDelete)
	return &LinLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinLogClient) DeleteOne(ll *LinLog) *LinLogDeleteOne {
	return c.DeleteOneID(ll.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinLogClient) DeleteOneID(id int) *LinLogDeleteOne {
	builder := c.Delete().Where(linlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinLogDeleteOne{builder}
}

// Query returns a query builder for LinLog.
func (c *LinLogClient) Query() *LinLogQuery {
	return &LinLogQuery{
		config: c.config,
	}
}

// Get returns a LinLog entity by its id.
func (c *LinLogClient) Get(ctx context.Context, id int) (*LinLog, error) {
	return c.Query().Where(linlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinLogClient) GetX(ctx context.Context, id int) *LinLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LinLogClient) Hooks() []Hook {
	return c.hooks.LinLog
}

// LinPermissionClient is a client for the LinPermission schema.
type LinPermissionClient struct {
	config
}

// NewLinPermissionClient returns a client for the LinPermission from the given config.
func NewLinPermissionClient(c config) *LinPermissionClient {
	return &LinPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linpermission.Hooks(f(g(h())))`.
func (c *LinPermissionClient) Use(hooks ...Hook) {
	c.hooks.LinPermission = append(c.hooks.LinPermission, hooks...)
}

// Create returns a create builder for LinPermission.
func (c *LinPermissionClient) Create() *LinPermissionCreate {
	mutation := newLinPermissionMutation(c.config, OpCreate)
	return &LinPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinPermission entities.
func (c *LinPermissionClient) CreateBulk(builders ...*LinPermissionCreate) *LinPermissionCreateBulk {
	return &LinPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinPermission.
func (c *LinPermissionClient) Update() *LinPermissionUpdate {
	mutation := newLinPermissionMutation(c.config, OpUpdate)
	return &LinPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinPermissionClient) UpdateOne(lp *LinPermission) *LinPermissionUpdateOne {
	mutation := newLinPermissionMutation(c.config, OpUpdateOne, withLinPermission(lp))
	return &LinPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinPermissionClient) UpdateOneID(id int) *LinPermissionUpdateOne {
	mutation := newLinPermissionMutation(c.config, OpUpdateOne, withLinPermissionID(id))
	return &LinPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinPermission.
func (c *LinPermissionClient) Delete() *LinPermissionDelete {
	mutation := newLinPermissionMutation(c.config, OpDelete)
	return &LinPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinPermissionClient) DeleteOne(lp *LinPermission) *LinPermissionDeleteOne {
	return c.DeleteOneID(lp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinPermissionClient) DeleteOneID(id int) *LinPermissionDeleteOne {
	builder := c.Delete().Where(linpermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinPermissionDeleteOne{builder}
}

// Query returns a query builder for LinPermission.
func (c *LinPermissionClient) Query() *LinPermissionQuery {
	return &LinPermissionQuery{
		config: c.config,
	}
}

// Get returns a LinPermission entity by its id.
func (c *LinPermissionClient) Get(ctx context.Context, id int) (*LinPermission, error) {
	return c.Query().Where(linpermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinPermissionClient) GetX(ctx context.Context, id int) *LinPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLinGroup queries the lin_group edge of a LinPermission.
func (c *LinPermissionClient) QueryLinGroup(lp *LinPermission) *LinGroupQuery {
	query := &LinGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(linpermission.Table, linpermission.FieldID, id),
			sqlgraph.To(lingroup.Table, lingroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, linpermission.LinGroupTable, linpermission.LinGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinPermissionClient) Hooks() []Hook {
	return c.hooks.LinPermission
}

// LinUserClient is a client for the LinUser schema.
type LinUserClient struct {
	config
}

// NewLinUserClient returns a client for the LinUser from the given config.
func NewLinUserClient(c config) *LinUserClient {
	return &LinUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linuser.Hooks(f(g(h())))`.
func (c *LinUserClient) Use(hooks ...Hook) {
	c.hooks.LinUser = append(c.hooks.LinUser, hooks...)
}

// Create returns a create builder for LinUser.
func (c *LinUserClient) Create() *LinUserCreate {
	mutation := newLinUserMutation(c.config, OpCreate)
	return &LinUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinUser entities.
func (c *LinUserClient) CreateBulk(builders ...*LinUserCreate) *LinUserCreateBulk {
	return &LinUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinUser.
func (c *LinUserClient) Update() *LinUserUpdate {
	mutation := newLinUserMutation(c.config, OpUpdate)
	return &LinUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinUserClient) UpdateOne(lu *LinUser) *LinUserUpdateOne {
	mutation := newLinUserMutation(c.config, OpUpdateOne, withLinUser(lu))
	return &LinUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinUserClient) UpdateOneID(id int) *LinUserUpdateOne {
	mutation := newLinUserMutation(c.config, OpUpdateOne, withLinUserID(id))
	return &LinUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinUser.
func (c *LinUserClient) Delete() *LinUserDelete {
	mutation := newLinUserMutation(c.config, OpDelete)
	return &LinUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinUserClient) DeleteOne(lu *LinUser) *LinUserDeleteOne {
	return c.DeleteOneID(lu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinUserClient) DeleteOneID(id int) *LinUserDeleteOne {
	builder := c.Delete().Where(linuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinUserDeleteOne{builder}
}

// Query returns a query builder for LinUser.
func (c *LinUserClient) Query() *LinUserQuery {
	return &LinUserQuery{
		config: c.config,
	}
}

// Get returns a LinUser entity by its id.
func (c *LinUserClient) Get(ctx context.Context, id int) (*LinUser, error) {
	return c.Query().Where(linuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinUserClient) GetX(ctx context.Context, id int) *LinUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLinUserIdentiy queries the lin_user_identiy edge of a LinUser.
func (c *LinUserClient) QueryLinUserIdentiy(lu *LinUser) *LinUserIdentiyQuery {
	query := &LinUserIdentiyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(linuser.Table, linuser.FieldID, id),
			sqlgraph.To(linuseridentiy.Table, linuseridentiy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, linuser.LinUserIdentiyTable, linuser.LinUserIdentiyColumn),
		)
		fromV = sqlgraph.Neighbors(lu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinGroup queries the lin_group edge of a LinUser.
func (c *LinUserClient) QueryLinGroup(lu *LinUser) *LinGroupQuery {
	query := &LinGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(linuser.Table, linuser.FieldID, id),
			sqlgraph.To(lingroup.Table, lingroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, linuser.LinGroupTable, linuser.LinGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinUserClient) Hooks() []Hook {
	return c.hooks.LinUser
}

// LinUserIdentiyClient is a client for the LinUserIdentiy schema.
type LinUserIdentiyClient struct {
	config
}

// NewLinUserIdentiyClient returns a client for the LinUserIdentiy from the given config.
func NewLinUserIdentiyClient(c config) *LinUserIdentiyClient {
	return &LinUserIdentiyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `linuseridentiy.Hooks(f(g(h())))`.
func (c *LinUserIdentiyClient) Use(hooks ...Hook) {
	c.hooks.LinUserIdentiy = append(c.hooks.LinUserIdentiy, hooks...)
}

// Create returns a create builder for LinUserIdentiy.
func (c *LinUserIdentiyClient) Create() *LinUserIdentiyCreate {
	mutation := newLinUserIdentiyMutation(c.config, OpCreate)
	return &LinUserIdentiyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LinUserIdentiy entities.
func (c *LinUserIdentiyClient) CreateBulk(builders ...*LinUserIdentiyCreate) *LinUserIdentiyCreateBulk {
	return &LinUserIdentiyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LinUserIdentiy.
func (c *LinUserIdentiyClient) Update() *LinUserIdentiyUpdate {
	mutation := newLinUserIdentiyMutation(c.config, OpUpdate)
	return &LinUserIdentiyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinUserIdentiyClient) UpdateOne(lui *LinUserIdentiy) *LinUserIdentiyUpdateOne {
	mutation := newLinUserIdentiyMutation(c.config, OpUpdateOne, withLinUserIdentiy(lui))
	return &LinUserIdentiyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinUserIdentiyClient) UpdateOneID(id int) *LinUserIdentiyUpdateOne {
	mutation := newLinUserIdentiyMutation(c.config, OpUpdateOne, withLinUserIdentiyID(id))
	return &LinUserIdentiyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LinUserIdentiy.
func (c *LinUserIdentiyClient) Delete() *LinUserIdentiyDelete {
	mutation := newLinUserIdentiyMutation(c.config, OpDelete)
	return &LinUserIdentiyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinUserIdentiyClient) DeleteOne(lui *LinUserIdentiy) *LinUserIdentiyDeleteOne {
	return c.DeleteOneID(lui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinUserIdentiyClient) DeleteOneID(id int) *LinUserIdentiyDeleteOne {
	builder := c.Delete().Where(linuseridentiy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinUserIdentiyDeleteOne{builder}
}

// Query returns a query builder for LinUserIdentiy.
func (c *LinUserIdentiyClient) Query() *LinUserIdentiyQuery {
	return &LinUserIdentiyQuery{
		config: c.config,
	}
}

// Get returns a LinUserIdentiy entity by its id.
func (c *LinUserIdentiyClient) Get(ctx context.Context, id int) (*LinUserIdentiy, error) {
	return c.Query().Where(linuseridentiy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinUserIdentiyClient) GetX(ctx context.Context, id int) *LinUserIdentiy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LinUserIdentiyClient) Hooks() []Hook {
	return c.hooks.LinUserIdentiy
}
