// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"lin-cms-go/internal/data/model/linuseridentiy"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinUserIdentiyCreate is the builder for creating a LinUserIdentiy entity.
type LinUserIdentiyCreate struct {
	config
	mutation *LinUserIdentiyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (luic *LinUserIdentiyCreate) SetCreateTime(t time.Time) *LinUserIdentiyCreate {
	luic.mutation.SetCreateTime(t)
	return luic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (luic *LinUserIdentiyCreate) SetNillableCreateTime(t *time.Time) *LinUserIdentiyCreate {
	if t != nil {
		luic.SetCreateTime(*t)
	}
	return luic
}

// SetUpdateTime sets the "update_time" field.
func (luic *LinUserIdentiyCreate) SetUpdateTime(t time.Time) *LinUserIdentiyCreate {
	luic.mutation.SetUpdateTime(t)
	return luic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (luic *LinUserIdentiyCreate) SetNillableUpdateTime(t *time.Time) *LinUserIdentiyCreate {
	if t != nil {
		luic.SetUpdateTime(*t)
	}
	return luic
}

// SetDeleteTime sets the "delete_time" field.
func (luic *LinUserIdentiyCreate) SetDeleteTime(t time.Time) *LinUserIdentiyCreate {
	luic.mutation.SetDeleteTime(t)
	return luic
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (luic *LinUserIdentiyCreate) SetNillableDeleteTime(t *time.Time) *LinUserIdentiyCreate {
	if t != nil {
		luic.SetDeleteTime(*t)
	}
	return luic
}

// SetUserID sets the "user_id" field.
func (luic *LinUserIdentiyCreate) SetUserID(i int) *LinUserIdentiyCreate {
	luic.mutation.SetUserID(i)
	return luic
}

// SetIdentityType sets the "identity_type" field.
func (luic *LinUserIdentiyCreate) SetIdentityType(s string) *LinUserIdentiyCreate {
	luic.mutation.SetIdentityType(s)
	return luic
}

// SetIdentifier sets the "identifier" field.
func (luic *LinUserIdentiyCreate) SetIdentifier(s string) *LinUserIdentiyCreate {
	luic.mutation.SetIdentifier(s)
	return luic
}

// SetCredential sets the "credential" field.
func (luic *LinUserIdentiyCreate) SetCredential(s string) *LinUserIdentiyCreate {
	luic.mutation.SetCredential(s)
	return luic
}

// Mutation returns the LinUserIdentiyMutation object of the builder.
func (luic *LinUserIdentiyCreate) Mutation() *LinUserIdentiyMutation {
	return luic.mutation
}

// Save creates the LinUserIdentiy in the database.
func (luic *LinUserIdentiyCreate) Save(ctx context.Context) (*LinUserIdentiy, error) {
	var (
		err  error
		node *LinUserIdentiy
	)
	luic.defaults()
	if len(luic.hooks) == 0 {
		if err = luic.check(); err != nil {
			return nil, err
		}
		node, err = luic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinUserIdentiyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luic.check(); err != nil {
				return nil, err
			}
			luic.mutation = mutation
			if node, err = luic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(luic.hooks) - 1; i >= 0; i-- {
			if luic.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = luic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (luic *LinUserIdentiyCreate) SaveX(ctx context.Context) *LinUserIdentiy {
	v, err := luic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (luic *LinUserIdentiyCreate) Exec(ctx context.Context) error {
	_, err := luic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luic *LinUserIdentiyCreate) ExecX(ctx context.Context) {
	if err := luic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luic *LinUserIdentiyCreate) defaults() {
	if _, ok := luic.mutation.CreateTime(); !ok {
		v := linuseridentiy.DefaultCreateTime()
		luic.mutation.SetCreateTime(v)
	}
	if _, ok := luic.mutation.UpdateTime(); !ok {
		v := linuseridentiy.DefaultUpdateTime()
		luic.mutation.SetUpdateTime(v)
	}
	if _, ok := luic.mutation.DeleteTime(); !ok {
		v := linuseridentiy.DefaultDeleteTime()
		luic.mutation.SetDeleteTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luic *LinUserIdentiyCreate) check() error {
	if _, ok := luic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := luic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := luic.mutation.DeleteTime(); !ok {
		return &ValidationError{Name: "delete_time", err: errors.New(`model: missing required field "delete_time"`)}
	}
	if _, ok := luic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`model: missing required field "user_id"`)}
	}
	if _, ok := luic.mutation.IdentityType(); !ok {
		return &ValidationError{Name: "identity_type", err: errors.New(`model: missing required field "identity_type"`)}
	}
	if _, ok := luic.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`model: missing required field "identifier"`)}
	}
	if _, ok := luic.mutation.Credential(); !ok {
		return &ValidationError{Name: "credential", err: errors.New(`model: missing required field "credential"`)}
	}
	return nil
}

func (luic *LinUserIdentiyCreate) sqlSave(ctx context.Context) (*LinUserIdentiy, error) {
	_node, _spec := luic.createSpec()
	if err := sqlgraph.CreateNode(ctx, luic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (luic *LinUserIdentiyCreate) createSpec() (*LinUserIdentiy, *sqlgraph.CreateSpec) {
	var (
		_node = &LinUserIdentiy{config: luic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: linuseridentiy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linuseridentiy.FieldID,
			},
		}
	)
	if value, ok := luic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuseridentiy.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := luic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuseridentiy.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := luic.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: linuseridentiy.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := luic.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linuseridentiy.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := luic.mutation.IdentityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentityType,
		})
		_node.IdentityType = value
	}
	if value, ok := luic.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if value, ok := luic.mutation.Credential(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linuseridentiy.FieldCredential,
		})
		_node.Credential = value
	}
	return _node, _spec
}

// LinUserIdentiyCreateBulk is the builder for creating many LinUserIdentiy entities in bulk.
type LinUserIdentiyCreateBulk struct {
	config
	builders []*LinUserIdentiyCreate
}

// Save creates the LinUserIdentiy entities in the database.
func (luicb *LinUserIdentiyCreateBulk) Save(ctx context.Context) ([]*LinUserIdentiy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(luicb.builders))
	nodes := make([]*LinUserIdentiy, len(luicb.builders))
	mutators := make([]Mutator, len(luicb.builders))
	for i := range luicb.builders {
		func(i int, root context.Context) {
			builder := luicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinUserIdentiyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, luicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, luicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, luicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (luicb *LinUserIdentiyCreateBulk) SaveX(ctx context.Context) []*LinUserIdentiy {
	v, err := luicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (luicb *LinUserIdentiyCreateBulk) Exec(ctx context.Context) error {
	_, err := luicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luicb *LinUserIdentiyCreateBulk) ExecX(ctx context.Context) {
	if err := luicb.Exec(ctx); err != nil {
		panic(err)
	}
}
