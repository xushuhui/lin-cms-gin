// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/book"
	"lin-cms-go/internal/data/model/linfile"
	"lin-cms-go/internal/data/model/lingroup"
	"lin-cms-go/internal/data/model/lingrouppermission"
	"lin-cms-go/internal/data/model/linlog"
	"lin-cms-go/internal/data/model/linpermission"
	"lin-cms-go/internal/data/model/linuser"
	"lin-cms-go/internal/data/model/linuseridentiy"
	"lin-cms-go/internal/data/model/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBook               = "Book"
	TypeLinFile            = "LinFile"
	TypeLinGroup           = "LinGroup"
	TypeLinGroupPermission = "LinGroupPermission"
	TypeLinLog             = "LinLog"
	TypeLinPermission      = "LinPermission"
	TypeLinUser            = "LinUser"
	TypeLinUserIdentiy     = "LinUserIdentiy"
)

// BookMutation represents an operation that mutates the Book nodes in the graph.
type BookMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	author        *string
	summary       *string
	image         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Book, error)
	predicates    []predicate.Book
}

var _ ent.Mutation = (*BookMutation)(nil)

// bookOption allows management of the mutation configuration using functional options.
type bookOption func(*BookMutation)

// newBookMutation creates new mutation for the Book entity.
func newBookMutation(c config, op Op, opts ...bookOption) *BookMutation {
	m := &BookMutation{
		config:        c,
		op:            op,
		typ:           TypeBook,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookID sets the ID field of the mutation.
func withBookID(id int) bookOption {
	return func(m *BookMutation) {
		var (
			err   error
			once  sync.Once
			value *Book
		)
		m.oldValue = func(ctx context.Context) (*Book, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Book.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBook sets the old Book of the mutation.
func withBook(node *Book) bookOption {
	return func(m *BookMutation) {
		m.oldValue = func(context.Context) (*Book, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *BookMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BookMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BookMutation) ResetTitle() {
	m.title = nil
}

// SetAuthor sets the "author" field.
func (m *BookMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *BookMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *BookMutation) ResetAuthor() {
	m.author = nil
}

// SetSummary sets the "summary" field.
func (m *BookMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *BookMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *BookMutation) ResetSummary() {
	m.summary = nil
}

// SetImage sets the "image" field.
func (m *BookMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *BookMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Book entity.
// If the Book object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *BookMutation) ResetImage() {
	m.image = nil
}

// Where appends a list predicates to the BookMutation builder.
func (m *BookMutation) Where(ps ...predicate.Book) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BookMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Book).
func (m *BookMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, book.FieldTitle)
	}
	if m.author != nil {
		fields = append(fields, book.FieldAuthor)
	}
	if m.summary != nil {
		fields = append(fields, book.FieldSummary)
	}
	if m.image != nil {
		fields = append(fields, book.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case book.FieldTitle:
		return m.Title()
	case book.FieldAuthor:
		return m.Author()
	case book.FieldSummary:
		return m.Summary()
	case book.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case book.FieldTitle:
		return m.OldTitle(ctx)
	case book.FieldAuthor:
		return m.OldAuthor(ctx)
	case book.FieldSummary:
		return m.OldSummary(ctx)
	case book.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown Book field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMutation) SetField(name string, value ent.Value) error {
	switch name {
	case book.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case book.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case book.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case book.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Book numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Book nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookMutation) ResetField(name string) error {
	switch name {
	case book.FieldTitle:
		m.ResetTitle()
		return nil
	case book.FieldAuthor:
		m.ResetAuthor()
		return nil
	case book.FieldSummary:
		m.ResetSummary()
		return nil
	case book.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Book unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Book edge %s", name)
}

// LinFileMutation represents an operation that mutates the LinFile nodes in the graph.
type LinFileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_path         *string
	_type         *int8
	add_type      *int8
	name          *string
	extension     *string
	size          *int
	addsize       *int
	md5           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LinFile, error)
	predicates    []predicate.LinFile
}

var _ ent.Mutation = (*LinFileMutation)(nil)

// linfileOption allows management of the mutation configuration using functional options.
type linfileOption func(*LinFileMutation)

// newLinFileMutation creates new mutation for the LinFile entity.
func newLinFileMutation(c config, op Op, opts ...linfileOption) *LinFileMutation {
	m := &LinFileMutation{
		config:        c,
		op:            op,
		typ:           TypeLinFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinFileID sets the ID field of the mutation.
func withLinFileID(id int) linfileOption {
	return func(m *LinFileMutation) {
		var (
			err   error
			once  sync.Once
			value *LinFile
		)
		m.oldValue = func(ctx context.Context) (*LinFile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinFile sets the old LinFile of the mutation.
func withLinFile(node *LinFile) linfileOption {
	return func(m *LinFileMutation) {
		m.oldValue = func(context.Context) (*LinFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinFileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPath sets the "path" field.
func (m *LinFileMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *LinFileMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *LinFileMutation) ResetPath() {
	m._path = nil
}

// SetType sets the "type" field.
func (m *LinFileMutation) SetType(i int8) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *LinFileMutation) GetType() (r int8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *LinFileMutation) AddType(i int8) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *LinFileMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *LinFileMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetName sets the "name" field.
func (m *LinFileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LinFileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LinFileMutation) ResetName() {
	m.name = nil
}

// SetExtension sets the "extension" field.
func (m *LinFileMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *LinFileMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *LinFileMutation) ResetExtension() {
	m.extension = nil
}

// SetSize sets the "size" field.
func (m *LinFileMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *LinFileMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *LinFileMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *LinFileMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *LinFileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetMd5 sets the "md5" field.
func (m *LinFileMutation) SetMd5(s string) {
	m.md5 = &s
}

// Md5 returns the value of the "md5" field in the mutation.
func (m *LinFileMutation) Md5() (r string, exists bool) {
	v := m.md5
	if v == nil {
		return
	}
	return *v, true
}

// OldMd5 returns the old "md5" field's value of the LinFile entity.
// If the LinFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinFileMutation) OldMd5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMd5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMd5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMd5: %w", err)
	}
	return oldValue.Md5, nil
}

// ResetMd5 resets all changes to the "md5" field.
func (m *LinFileMutation) ResetMd5() {
	m.md5 = nil
}

// Where appends a list predicates to the LinFileMutation builder.
func (m *LinFileMutation) Where(ps ...predicate.LinFile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinFileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinFile).
func (m *LinFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinFileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._path != nil {
		fields = append(fields, linfile.FieldPath)
	}
	if m._type != nil {
		fields = append(fields, linfile.FieldType)
	}
	if m.name != nil {
		fields = append(fields, linfile.FieldName)
	}
	if m.extension != nil {
		fields = append(fields, linfile.FieldExtension)
	}
	if m.size != nil {
		fields = append(fields, linfile.FieldSize)
	}
	if m.md5 != nil {
		fields = append(fields, linfile.FieldMd5)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linfile.FieldPath:
		return m.Path()
	case linfile.FieldType:
		return m.GetType()
	case linfile.FieldName:
		return m.Name()
	case linfile.FieldExtension:
		return m.Extension()
	case linfile.FieldSize:
		return m.Size()
	case linfile.FieldMd5:
		return m.Md5()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linfile.FieldPath:
		return m.OldPath(ctx)
	case linfile.FieldType:
		return m.OldType(ctx)
	case linfile.FieldName:
		return m.OldName(ctx)
	case linfile.FieldExtension:
		return m.OldExtension(ctx)
	case linfile.FieldSize:
		return m.OldSize(ctx)
	case linfile.FieldMd5:
		return m.OldMd5(ctx)
	}
	return nil, fmt.Errorf("unknown LinFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linfile.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case linfile.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case linfile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case linfile.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case linfile.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case linfile.FieldMd5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMd5(v)
		return nil
	}
	return fmt.Errorf("unknown LinFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinFileMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, linfile.FieldType)
	}
	if m.addsize != nil {
		fields = append(fields, linfile.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinFileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case linfile.FieldType:
		return m.AddedType()
	case linfile.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case linfile.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case linfile.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown LinFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinFileMutation) ResetField(name string) error {
	switch name {
	case linfile.FieldPath:
		m.ResetPath()
		return nil
	case linfile.FieldType:
		m.ResetType()
		return nil
	case linfile.FieldName:
		m.ResetName()
		return nil
	case linfile.FieldExtension:
		m.ResetExtension()
		return nil
	case linfile.FieldSize:
		m.ResetSize()
		return nil
	case linfile.FieldMd5:
		m.ResetMd5()
		return nil
	}
	return fmt.Errorf("unknown LinFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinFileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinFileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinFileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinFileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LinFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinFileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LinFile edge %s", name)
}

// LinGroupMutation represents an operation that mutates the LinGroup nodes in the graph.
type LinGroupMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	info                  *string
	level                 *int8
	addlevel              *int8
	clearedFields         map[string]struct{}
	lin_user              map[int]struct{}
	removedlin_user       map[int]struct{}
	clearedlin_user       bool
	lin_permission        map[int]struct{}
	removedlin_permission map[int]struct{}
	clearedlin_permission bool
	done                  bool
	oldValue              func(context.Context) (*LinGroup, error)
	predicates            []predicate.LinGroup
}

var _ ent.Mutation = (*LinGroupMutation)(nil)

// lingroupOption allows management of the mutation configuration using functional options.
type lingroupOption func(*LinGroupMutation)

// newLinGroupMutation creates new mutation for the LinGroup entity.
func newLinGroupMutation(c config, op Op, opts ...lingroupOption) *LinGroupMutation {
	m := &LinGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeLinGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinGroupID sets the ID field of the mutation.
func withLinGroupID(id int) lingroupOption {
	return func(m *LinGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *LinGroup
		)
		m.oldValue = func(ctx context.Context) (*LinGroup, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinGroup sets the old LinGroup of the mutation.
func withLinGroup(node *LinGroup) lingroupOption {
	return func(m *LinGroupMutation) {
		m.oldValue = func(context.Context) (*LinGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *LinGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LinGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LinGroup entity.
// If the LinGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LinGroupMutation) ResetName() {
	m.name = nil
}

// SetInfo sets the "info" field.
func (m *LinGroupMutation) SetInfo(s string) {
	m.info = &s
}

// Info returns the value of the "info" field in the mutation.
func (m *LinGroupMutation) Info() (r string, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the LinGroup entity.
// If the LinGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinGroupMutation) OldInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ResetInfo resets all changes to the "info" field.
func (m *LinGroupMutation) ResetInfo() {
	m.info = nil
}

// SetLevel sets the "level" field.
func (m *LinGroupMutation) SetLevel(i int8) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *LinGroupMutation) Level() (r int8, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the LinGroup entity.
// If the LinGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinGroupMutation) OldLevel(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *LinGroupMutation) AddLevel(i int8) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *LinGroupMutation) AddedLevel() (r int8, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *LinGroupMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// AddLinUserIDs adds the "lin_user" edge to the LinUser entity by ids.
func (m *LinGroupMutation) AddLinUserIDs(ids ...int) {
	if m.lin_user == nil {
		m.lin_user = make(map[int]struct{})
	}
	for i := range ids {
		m.lin_user[ids[i]] = struct{}{}
	}
}

// ClearLinUser clears the "lin_user" edge to the LinUser entity.
func (m *LinGroupMutation) ClearLinUser() {
	m.clearedlin_user = true
}

// LinUserCleared reports if the "lin_user" edge to the LinUser entity was cleared.
func (m *LinGroupMutation) LinUserCleared() bool {
	return m.clearedlin_user
}

// RemoveLinUserIDs removes the "lin_user" edge to the LinUser entity by IDs.
func (m *LinGroupMutation) RemoveLinUserIDs(ids ...int) {
	if m.removedlin_user == nil {
		m.removedlin_user = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lin_user, ids[i])
		m.removedlin_user[ids[i]] = struct{}{}
	}
}

// RemovedLinUser returns the removed IDs of the "lin_user" edge to the LinUser entity.
func (m *LinGroupMutation) RemovedLinUserIDs() (ids []int) {
	for id := range m.removedlin_user {
		ids = append(ids, id)
	}
	return
}

// LinUserIDs returns the "lin_user" edge IDs in the mutation.
func (m *LinGroupMutation) LinUserIDs() (ids []int) {
	for id := range m.lin_user {
		ids = append(ids, id)
	}
	return
}

// ResetLinUser resets all changes to the "lin_user" edge.
func (m *LinGroupMutation) ResetLinUser() {
	m.lin_user = nil
	m.clearedlin_user = false
	m.removedlin_user = nil
}

// AddLinPermissionIDs adds the "lin_permission" edge to the LinPermission entity by ids.
func (m *LinGroupMutation) AddLinPermissionIDs(ids ...int) {
	if m.lin_permission == nil {
		m.lin_permission = make(map[int]struct{})
	}
	for i := range ids {
		m.lin_permission[ids[i]] = struct{}{}
	}
}

// ClearLinPermission clears the "lin_permission" edge to the LinPermission entity.
func (m *LinGroupMutation) ClearLinPermission() {
	m.clearedlin_permission = true
}

// LinPermissionCleared reports if the "lin_permission" edge to the LinPermission entity was cleared.
func (m *LinGroupMutation) LinPermissionCleared() bool {
	return m.clearedlin_permission
}

// RemoveLinPermissionIDs removes the "lin_permission" edge to the LinPermission entity by IDs.
func (m *LinGroupMutation) RemoveLinPermissionIDs(ids ...int) {
	if m.removedlin_permission == nil {
		m.removedlin_permission = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lin_permission, ids[i])
		m.removedlin_permission[ids[i]] = struct{}{}
	}
}

// RemovedLinPermission returns the removed IDs of the "lin_permission" edge to the LinPermission entity.
func (m *LinGroupMutation) RemovedLinPermissionIDs() (ids []int) {
	for id := range m.removedlin_permission {
		ids = append(ids, id)
	}
	return
}

// LinPermissionIDs returns the "lin_permission" edge IDs in the mutation.
func (m *LinGroupMutation) LinPermissionIDs() (ids []int) {
	for id := range m.lin_permission {
		ids = append(ids, id)
	}
	return
}

// ResetLinPermission resets all changes to the "lin_permission" edge.
func (m *LinGroupMutation) ResetLinPermission() {
	m.lin_permission = nil
	m.clearedlin_permission = false
	m.removedlin_permission = nil
}

// Where appends a list predicates to the LinGroupMutation builder.
func (m *LinGroupMutation) Where(ps ...predicate.LinGroup) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinGroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinGroup).
func (m *LinGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinGroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, lingroup.FieldName)
	}
	if m.info != nil {
		fields = append(fields, lingroup.FieldInfo)
	}
	if m.level != nil {
		fields = append(fields, lingroup.FieldLevel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lingroup.FieldName:
		return m.Name()
	case lingroup.FieldInfo:
		return m.Info()
	case lingroup.FieldLevel:
		return m.Level()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lingroup.FieldName:
		return m.OldName(ctx)
	case lingroup.FieldInfo:
		return m.OldInfo(ctx)
	case lingroup.FieldLevel:
		return m.OldLevel(ctx)
	}
	return nil, fmt.Errorf("unknown LinGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lingroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case lingroup.FieldInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	case lingroup.FieldLevel:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	}
	return fmt.Errorf("unknown LinGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinGroupMutation) AddedFields() []string {
	var fields []string
	if m.addlevel != nil {
		fields = append(fields, lingroup.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinGroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lingroup.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lingroup.FieldLevel:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown LinGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinGroupMutation) ResetField(name string) error {
	switch name {
	case lingroup.FieldName:
		m.ResetName()
		return nil
	case lingroup.FieldInfo:
		m.ResetInfo()
		return nil
	case lingroup.FieldLevel:
		m.ResetLevel()
		return nil
	}
	return fmt.Errorf("unknown LinGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lin_user != nil {
		edges = append(edges, lingroup.EdgeLinUser)
	}
	if m.lin_permission != nil {
		edges = append(edges, lingroup.EdgeLinPermission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lingroup.EdgeLinUser:
		ids := make([]ent.Value, 0, len(m.lin_user))
		for id := range m.lin_user {
			ids = append(ids, id)
		}
		return ids
	case lingroup.EdgeLinPermission:
		ids := make([]ent.Value, 0, len(m.lin_permission))
		for id := range m.lin_permission {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlin_user != nil {
		edges = append(edges, lingroup.EdgeLinUser)
	}
	if m.removedlin_permission != nil {
		edges = append(edges, lingroup.EdgeLinPermission)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lingroup.EdgeLinUser:
		ids := make([]ent.Value, 0, len(m.removedlin_user))
		for id := range m.removedlin_user {
			ids = append(ids, id)
		}
		return ids
	case lingroup.EdgeLinPermission:
		ids := make([]ent.Value, 0, len(m.removedlin_permission))
		for id := range m.removedlin_permission {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlin_user {
		edges = append(edges, lingroup.EdgeLinUser)
	}
	if m.clearedlin_permission {
		edges = append(edges, lingroup.EdgeLinPermission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case lingroup.EdgeLinUser:
		return m.clearedlin_user
	case lingroup.EdgeLinPermission:
		return m.clearedlin_permission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown LinGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinGroupMutation) ResetEdge(name string) error {
	switch name {
	case lingroup.EdgeLinUser:
		m.ResetLinUser()
		return nil
	case lingroup.EdgeLinPermission:
		m.ResetLinPermission()
		return nil
	}
	return fmt.Errorf("unknown LinGroup edge %s", name)
}

// LinGroupPermissionMutation represents an operation that mutates the LinGroupPermission nodes in the graph.
type LinGroupPermissionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	group_id         *int
	addgroup_id      *int
	permission_id    *int
	addpermission_id *int
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*LinGroupPermission, error)
	predicates       []predicate.LinGroupPermission
}

var _ ent.Mutation = (*LinGroupPermissionMutation)(nil)

// lingrouppermissionOption allows management of the mutation configuration using functional options.
type lingrouppermissionOption func(*LinGroupPermissionMutation)

// newLinGroupPermissionMutation creates new mutation for the LinGroupPermission entity.
func newLinGroupPermissionMutation(c config, op Op, opts ...lingrouppermissionOption) *LinGroupPermissionMutation {
	m := &LinGroupPermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeLinGroupPermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinGroupPermissionID sets the ID field of the mutation.
func withLinGroupPermissionID(id int) lingrouppermissionOption {
	return func(m *LinGroupPermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *LinGroupPermission
		)
		m.oldValue = func(ctx context.Context) (*LinGroupPermission, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinGroupPermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinGroupPermission sets the old LinGroupPermission of the mutation.
func withLinGroupPermission(node *LinGroupPermission) lingrouppermissionOption {
	return func(m *LinGroupPermissionMutation) {
		m.oldValue = func(context.Context) (*LinGroupPermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinGroupPermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinGroupPermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinGroupPermissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGroupID sets the "group_id" field.
func (m *LinGroupPermissionMutation) SetGroupID(i int) {
	m.group_id = &i
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *LinGroupPermissionMutation) GroupID() (r int, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the LinGroupPermission entity.
// If the LinGroupPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinGroupPermissionMutation) OldGroupID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds i to the "group_id" field.
func (m *LinGroupPermissionMutation) AddGroupID(i int) {
	if m.addgroup_id != nil {
		*m.addgroup_id += i
	} else {
		m.addgroup_id = &i
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *LinGroupPermissionMutation) AddedGroupID() (r int, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *LinGroupPermissionMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
}

// SetPermissionID sets the "permission_id" field.
func (m *LinGroupPermissionMutation) SetPermissionID(i int) {
	m.permission_id = &i
	m.addpermission_id = nil
}

// PermissionID returns the value of the "permission_id" field in the mutation.
func (m *LinGroupPermissionMutation) PermissionID() (r int, exists bool) {
	v := m.permission_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionID returns the old "permission_id" field's value of the LinGroupPermission entity.
// If the LinGroupPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinGroupPermissionMutation) OldPermissionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionID: %w", err)
	}
	return oldValue.PermissionID, nil
}

// AddPermissionID adds i to the "permission_id" field.
func (m *LinGroupPermissionMutation) AddPermissionID(i int) {
	if m.addpermission_id != nil {
		*m.addpermission_id += i
	} else {
		m.addpermission_id = &i
	}
}

// AddedPermissionID returns the value that was added to the "permission_id" field in this mutation.
func (m *LinGroupPermissionMutation) AddedPermissionID() (r int, exists bool) {
	v := m.addpermission_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPermissionID resets all changes to the "permission_id" field.
func (m *LinGroupPermissionMutation) ResetPermissionID() {
	m.permission_id = nil
	m.addpermission_id = nil
}

// Where appends a list predicates to the LinGroupPermissionMutation builder.
func (m *LinGroupPermissionMutation) Where(ps ...predicate.LinGroupPermission) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinGroupPermissionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinGroupPermission).
func (m *LinGroupPermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinGroupPermissionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.group_id != nil {
		fields = append(fields, lingrouppermission.FieldGroupID)
	}
	if m.permission_id != nil {
		fields = append(fields, lingrouppermission.FieldPermissionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinGroupPermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lingrouppermission.FieldGroupID:
		return m.GroupID()
	case lingrouppermission.FieldPermissionID:
		return m.PermissionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinGroupPermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lingrouppermission.FieldGroupID:
		return m.OldGroupID(ctx)
	case lingrouppermission.FieldPermissionID:
		return m.OldPermissionID(ctx)
	}
	return nil, fmt.Errorf("unknown LinGroupPermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinGroupPermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lingrouppermission.FieldGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case lingrouppermission.FieldPermissionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionID(v)
		return nil
	}
	return fmt.Errorf("unknown LinGroupPermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinGroupPermissionMutation) AddedFields() []string {
	var fields []string
	if m.addgroup_id != nil {
		fields = append(fields, lingrouppermission.FieldGroupID)
	}
	if m.addpermission_id != nil {
		fields = append(fields, lingrouppermission.FieldPermissionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinGroupPermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lingrouppermission.FieldGroupID:
		return m.AddedGroupID()
	case lingrouppermission.FieldPermissionID:
		return m.AddedPermissionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinGroupPermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lingrouppermission.FieldGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case lingrouppermission.FieldPermissionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPermissionID(v)
		return nil
	}
	return fmt.Errorf("unknown LinGroupPermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinGroupPermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinGroupPermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinGroupPermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinGroupPermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinGroupPermissionMutation) ResetField(name string) error {
	switch name {
	case lingrouppermission.FieldGroupID:
		m.ResetGroupID()
		return nil
	case lingrouppermission.FieldPermissionID:
		m.ResetPermissionID()
		return nil
	}
	return fmt.Errorf("unknown LinGroupPermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinGroupPermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinGroupPermissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinGroupPermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinGroupPermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinGroupPermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinGroupPermissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinGroupPermissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LinGroupPermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinGroupPermissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LinGroupPermission edge %s", name)
}

// LinLogMutation represents an operation that mutates the LinLog nodes in the graph.
type LinLogMutation struct {
	config
	op             Op
	typ            string
	id             *int
	create_time    *time.Time
	update_time    *time.Time
	delete_time    *time.Time
	message        *string
	user_id        *int
	adduser_id     *int
	username       *string
	status_code    *int
	addstatus_code *int
	method         *string
	_path          *string
	permission     *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*LinLog, error)
	predicates     []predicate.LinLog
}

var _ ent.Mutation = (*LinLogMutation)(nil)

// linlogOption allows management of the mutation configuration using functional options.
type linlogOption func(*LinLogMutation)

// newLinLogMutation creates new mutation for the LinLog entity.
func newLinLogMutation(c config, op Op, opts ...linlogOption) *LinLogMutation {
	m := &LinLogMutation{
		config:        c,
		op:            op,
		typ:           TypeLinLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinLogID sets the ID field of the mutation.
func withLinLogID(id int) linlogOption {
	return func(m *LinLogMutation) {
		var (
			err   error
			once  sync.Once
			value *LinLog
		)
		m.oldValue = func(ctx context.Context) (*LinLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinLog sets the old LinLog of the mutation.
func withLinLog(node *LinLog) linlogOption {
	return func(m *LinLogMutation) {
		m.oldValue = func(context.Context) (*LinLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *LinLogMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LinLogMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LinLogMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *LinLogMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LinLogMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LinLogMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *LinLogMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *LinLogMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *LinLogMutation) ResetDeleteTime() {
	m.delete_time = nil
}

// SetMessage sets the "message" field.
func (m *LinLogMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *LinLogMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *LinLogMutation) ResetMessage() {
	m.message = nil
}

// SetUserID sets the "user_id" field.
func (m *LinLogMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LinLogMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *LinLogMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *LinLogMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LinLogMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetUsername sets the "username" field.
func (m *LinLogMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *LinLogMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *LinLogMutation) ResetUsername() {
	m.username = nil
}

// SetStatusCode sets the "status_code" field.
func (m *LinLogMutation) SetStatusCode(i int) {
	m.status_code = &i
	m.addstatus_code = nil
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *LinLogMutation) StatusCode() (r int, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldStatusCode(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// AddStatusCode adds i to the "status_code" field.
func (m *LinLogMutation) AddStatusCode(i int) {
	if m.addstatus_code != nil {
		*m.addstatus_code += i
	} else {
		m.addstatus_code = &i
	}
}

// AddedStatusCode returns the value that was added to the "status_code" field in this mutation.
func (m *LinLogMutation) AddedStatusCode() (r int, exists bool) {
	v := m.addstatus_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *LinLogMutation) ResetStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
}

// SetMethod sets the "method" field.
func (m *LinLogMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *LinLogMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *LinLogMutation) ResetMethod() {
	m.method = nil
}

// SetPath sets the "path" field.
func (m *LinLogMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *LinLogMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *LinLogMutation) ResetPath() {
	m._path = nil
}

// SetPermission sets the "permission" field.
func (m *LinLogMutation) SetPermission(s string) {
	m.permission = &s
}

// Permission returns the value of the "permission" field in the mutation.
func (m *LinLogMutation) Permission() (r string, exists bool) {
	v := m.permission
	if v == nil {
		return
	}
	return *v, true
}

// OldPermission returns the old "permission" field's value of the LinLog entity.
// If the LinLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinLogMutation) OldPermission(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermission: %w", err)
	}
	return oldValue.Permission, nil
}

// ResetPermission resets all changes to the "permission" field.
func (m *LinLogMutation) ResetPermission() {
	m.permission = nil
}

// Where appends a list predicates to the LinLogMutation builder.
func (m *LinLogMutation) Where(ps ...predicate.LinLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinLog).
func (m *LinLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinLogMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, linlog.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, linlog.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, linlog.FieldDeleteTime)
	}
	if m.message != nil {
		fields = append(fields, linlog.FieldMessage)
	}
	if m.user_id != nil {
		fields = append(fields, linlog.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, linlog.FieldUsername)
	}
	if m.status_code != nil {
		fields = append(fields, linlog.FieldStatusCode)
	}
	if m.method != nil {
		fields = append(fields, linlog.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, linlog.FieldPath)
	}
	if m.permission != nil {
		fields = append(fields, linlog.FieldPermission)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linlog.FieldCreateTime:
		return m.CreateTime()
	case linlog.FieldUpdateTime:
		return m.UpdateTime()
	case linlog.FieldDeleteTime:
		return m.DeleteTime()
	case linlog.FieldMessage:
		return m.Message()
	case linlog.FieldUserID:
		return m.UserID()
	case linlog.FieldUsername:
		return m.Username()
	case linlog.FieldStatusCode:
		return m.StatusCode()
	case linlog.FieldMethod:
		return m.Method()
	case linlog.FieldPath:
		return m.Path()
	case linlog.FieldPermission:
		return m.Permission()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linlog.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case linlog.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case linlog.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case linlog.FieldMessage:
		return m.OldMessage(ctx)
	case linlog.FieldUserID:
		return m.OldUserID(ctx)
	case linlog.FieldUsername:
		return m.OldUsername(ctx)
	case linlog.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case linlog.FieldMethod:
		return m.OldMethod(ctx)
	case linlog.FieldPath:
		return m.OldPath(ctx)
	case linlog.FieldPermission:
		return m.OldPermission(ctx)
	}
	return nil, fmt.Errorf("unknown LinLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linlog.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case linlog.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case linlog.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case linlog.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case linlog.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case linlog.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case linlog.FieldStatusCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case linlog.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case linlog.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case linlog.FieldPermission:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermission(v)
		return nil
	}
	return fmt.Errorf("unknown LinLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinLogMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, linlog.FieldUserID)
	}
	if m.addstatus_code != nil {
		fields = append(fields, linlog.FieldStatusCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case linlog.FieldUserID:
		return m.AddedUserID()
	case linlog.FieldStatusCode:
		return m.AddedStatusCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case linlog.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case linlog.FieldStatusCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusCode(v)
		return nil
	}
	return fmt.Errorf("unknown LinLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinLogMutation) ResetField(name string) error {
	switch name {
	case linlog.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case linlog.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case linlog.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case linlog.FieldMessage:
		m.ResetMessage()
		return nil
	case linlog.FieldUserID:
		m.ResetUserID()
		return nil
	case linlog.FieldUsername:
		m.ResetUsername()
		return nil
	case linlog.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case linlog.FieldMethod:
		m.ResetMethod()
		return nil
	case linlog.FieldPath:
		m.ResetPath()
		return nil
	case linlog.FieldPermission:
		m.ResetPermission()
		return nil
	}
	return fmt.Errorf("unknown LinLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LinLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LinLog edge %s", name)
}

// LinPermissionMutation represents an operation that mutates the LinPermission nodes in the graph.
type LinPermissionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	module           *string
	mount            *int8
	addmount         *int8
	clearedFields    map[string]struct{}
	lin_group        map[int]struct{}
	removedlin_group map[int]struct{}
	clearedlin_group bool
	done             bool
	oldValue         func(context.Context) (*LinPermission, error)
	predicates       []predicate.LinPermission
}

var _ ent.Mutation = (*LinPermissionMutation)(nil)

// linpermissionOption allows management of the mutation configuration using functional options.
type linpermissionOption func(*LinPermissionMutation)

// newLinPermissionMutation creates new mutation for the LinPermission entity.
func newLinPermissionMutation(c config, op Op, opts ...linpermissionOption) *LinPermissionMutation {
	m := &LinPermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeLinPermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinPermissionID sets the ID field of the mutation.
func withLinPermissionID(id int) linpermissionOption {
	return func(m *LinPermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *LinPermission
		)
		m.oldValue = func(ctx context.Context) (*LinPermission, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinPermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinPermission sets the old LinPermission of the mutation.
func withLinPermission(node *LinPermission) linpermissionOption {
	return func(m *LinPermissionMutation) {
		m.oldValue = func(context.Context) (*LinPermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinPermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinPermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinPermissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *LinPermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LinPermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LinPermission entity.
// If the LinPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinPermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LinPermissionMutation) ResetName() {
	m.name = nil
}

// SetModule sets the "module" field.
func (m *LinPermissionMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *LinPermissionMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the LinPermission entity.
// If the LinPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinPermissionMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ResetModule resets all changes to the "module" field.
func (m *LinPermissionMutation) ResetModule() {
	m.module = nil
}

// SetMount sets the "mount" field.
func (m *LinPermissionMutation) SetMount(i int8) {
	m.mount = &i
	m.addmount = nil
}

// Mount returns the value of the "mount" field in the mutation.
func (m *LinPermissionMutation) Mount() (r int8, exists bool) {
	v := m.mount
	if v == nil {
		return
	}
	return *v, true
}

// OldMount returns the old "mount" field's value of the LinPermission entity.
// If the LinPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinPermissionMutation) OldMount(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMount: %w", err)
	}
	return oldValue.Mount, nil
}

// AddMount adds i to the "mount" field.
func (m *LinPermissionMutation) AddMount(i int8) {
	if m.addmount != nil {
		*m.addmount += i
	} else {
		m.addmount = &i
	}
}

// AddedMount returns the value that was added to the "mount" field in this mutation.
func (m *LinPermissionMutation) AddedMount() (r int8, exists bool) {
	v := m.addmount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMount resets all changes to the "mount" field.
func (m *LinPermissionMutation) ResetMount() {
	m.mount = nil
	m.addmount = nil
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by ids.
func (m *LinPermissionMutation) AddLinGroupIDs(ids ...int) {
	if m.lin_group == nil {
		m.lin_group = make(map[int]struct{})
	}
	for i := range ids {
		m.lin_group[ids[i]] = struct{}{}
	}
}

// ClearLinGroup clears the "lin_group" edge to the LinGroup entity.
func (m *LinPermissionMutation) ClearLinGroup() {
	m.clearedlin_group = true
}

// LinGroupCleared reports if the "lin_group" edge to the LinGroup entity was cleared.
func (m *LinPermissionMutation) LinGroupCleared() bool {
	return m.clearedlin_group
}

// RemoveLinGroupIDs removes the "lin_group" edge to the LinGroup entity by IDs.
func (m *LinPermissionMutation) RemoveLinGroupIDs(ids ...int) {
	if m.removedlin_group == nil {
		m.removedlin_group = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lin_group, ids[i])
		m.removedlin_group[ids[i]] = struct{}{}
	}
}

// RemovedLinGroup returns the removed IDs of the "lin_group" edge to the LinGroup entity.
func (m *LinPermissionMutation) RemovedLinGroupIDs() (ids []int) {
	for id := range m.removedlin_group {
		ids = append(ids, id)
	}
	return
}

// LinGroupIDs returns the "lin_group" edge IDs in the mutation.
func (m *LinPermissionMutation) LinGroupIDs() (ids []int) {
	for id := range m.lin_group {
		ids = append(ids, id)
	}
	return
}

// ResetLinGroup resets all changes to the "lin_group" edge.
func (m *LinPermissionMutation) ResetLinGroup() {
	m.lin_group = nil
	m.clearedlin_group = false
	m.removedlin_group = nil
}

// Where appends a list predicates to the LinPermissionMutation builder.
func (m *LinPermissionMutation) Where(ps ...predicate.LinPermission) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinPermissionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinPermission).
func (m *LinPermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinPermissionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, linpermission.FieldName)
	}
	if m.module != nil {
		fields = append(fields, linpermission.FieldModule)
	}
	if m.mount != nil {
		fields = append(fields, linpermission.FieldMount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinPermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linpermission.FieldName:
		return m.Name()
	case linpermission.FieldModule:
		return m.Module()
	case linpermission.FieldMount:
		return m.Mount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinPermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linpermission.FieldName:
		return m.OldName(ctx)
	case linpermission.FieldModule:
		return m.OldModule(ctx)
	case linpermission.FieldMount:
		return m.OldMount(ctx)
	}
	return nil, fmt.Errorf("unknown LinPermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinPermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linpermission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case linpermission.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case linpermission.FieldMount:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMount(v)
		return nil
	}
	return fmt.Errorf("unknown LinPermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinPermissionMutation) AddedFields() []string {
	var fields []string
	if m.addmount != nil {
		fields = append(fields, linpermission.FieldMount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinPermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case linpermission.FieldMount:
		return m.AddedMount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinPermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case linpermission.FieldMount:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMount(v)
		return nil
	}
	return fmt.Errorf("unknown LinPermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinPermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinPermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinPermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinPermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinPermissionMutation) ResetField(name string) error {
	switch name {
	case linpermission.FieldName:
		m.ResetName()
		return nil
	case linpermission.FieldModule:
		m.ResetModule()
		return nil
	case linpermission.FieldMount:
		m.ResetMount()
		return nil
	}
	return fmt.Errorf("unknown LinPermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinPermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.lin_group != nil {
		edges = append(edges, linpermission.EdgeLinGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinPermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case linpermission.EdgeLinGroup:
		ids := make([]ent.Value, 0, len(m.lin_group))
		for id := range m.lin_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinPermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlin_group != nil {
		edges = append(edges, linpermission.EdgeLinGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinPermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case linpermission.EdgeLinGroup:
		ids := make([]ent.Value, 0, len(m.removedlin_group))
		for id := range m.removedlin_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinPermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlin_group {
		edges = append(edges, linpermission.EdgeLinGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinPermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case linpermission.EdgeLinGroup:
		return m.clearedlin_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinPermissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown LinPermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinPermissionMutation) ResetEdge(name string) error {
	switch name {
	case linpermission.EdgeLinGroup:
		m.ResetLinGroup()
		return nil
	}
	return fmt.Errorf("unknown LinPermission edge %s", name)
}

// LinUserMutation represents an operation that mutates the LinUser nodes in the graph.
type LinUserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	delete_time             *time.Time
	username                *string
	nickname                *string
	avatar                  *string
	email                   *string
	clearedFields           map[string]struct{}
	lin_user_identiy        map[int]struct{}
	removedlin_user_identiy map[int]struct{}
	clearedlin_user_identiy bool
	lin_group               map[int]struct{}
	removedlin_group        map[int]struct{}
	clearedlin_group        bool
	done                    bool
	oldValue                func(context.Context) (*LinUser, error)
	predicates              []predicate.LinUser
}

var _ ent.Mutation = (*LinUserMutation)(nil)

// linuserOption allows management of the mutation configuration using functional options.
type linuserOption func(*LinUserMutation)

// newLinUserMutation creates new mutation for the LinUser entity.
func newLinUserMutation(c config, op Op, opts ...linuserOption) *LinUserMutation {
	m := &LinUserMutation{
		config:        c,
		op:            op,
		typ:           TypeLinUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinUserID sets the ID field of the mutation.
func withLinUserID(id int) linuserOption {
	return func(m *LinUserMutation) {
		var (
			err   error
			once  sync.Once
			value *LinUser
		)
		m.oldValue = func(ctx context.Context) (*LinUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinUser sets the old LinUser of the mutation.
func withLinUser(node *LinUser) linuserOption {
	return func(m *LinUserMutation) {
		m.oldValue = func(context.Context) (*LinUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *LinUserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LinUserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LinUserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *LinUserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LinUserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LinUserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *LinUserMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *LinUserMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *LinUserMutation) ResetDeleteTime() {
	m.delete_time = nil
}

// SetUsername sets the "username" field.
func (m *LinUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *LinUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *LinUserMutation) ResetUsername() {
	m.username = nil
}

// SetNickname sets the "nickname" field.
func (m *LinUserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *LinUserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *LinUserMutation) ResetNickname() {
	m.nickname = nil
}

// SetAvatar sets the "avatar" field.
func (m *LinUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *LinUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *LinUserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetEmail sets the "email" field.
func (m *LinUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *LinUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the LinUser entity.
// If the LinUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *LinUserMutation) ResetEmail() {
	m.email = nil
}

// AddLinUserIdentiyIDs adds the "lin_user_identiy" edge to the LinUserIdentiy entity by ids.
func (m *LinUserMutation) AddLinUserIdentiyIDs(ids ...int) {
	if m.lin_user_identiy == nil {
		m.lin_user_identiy = make(map[int]struct{})
	}
	for i := range ids {
		m.lin_user_identiy[ids[i]] = struct{}{}
	}
}

// ClearLinUserIdentiy clears the "lin_user_identiy" edge to the LinUserIdentiy entity.
func (m *LinUserMutation) ClearLinUserIdentiy() {
	m.clearedlin_user_identiy = true
}

// LinUserIdentiyCleared reports if the "lin_user_identiy" edge to the LinUserIdentiy entity was cleared.
func (m *LinUserMutation) LinUserIdentiyCleared() bool {
	return m.clearedlin_user_identiy
}

// RemoveLinUserIdentiyIDs removes the "lin_user_identiy" edge to the LinUserIdentiy entity by IDs.
func (m *LinUserMutation) RemoveLinUserIdentiyIDs(ids ...int) {
	if m.removedlin_user_identiy == nil {
		m.removedlin_user_identiy = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lin_user_identiy, ids[i])
		m.removedlin_user_identiy[ids[i]] = struct{}{}
	}
}

// RemovedLinUserIdentiy returns the removed IDs of the "lin_user_identiy" edge to the LinUserIdentiy entity.
func (m *LinUserMutation) RemovedLinUserIdentiyIDs() (ids []int) {
	for id := range m.removedlin_user_identiy {
		ids = append(ids, id)
	}
	return
}

// LinUserIdentiyIDs returns the "lin_user_identiy" edge IDs in the mutation.
func (m *LinUserMutation) LinUserIdentiyIDs() (ids []int) {
	for id := range m.lin_user_identiy {
		ids = append(ids, id)
	}
	return
}

// ResetLinUserIdentiy resets all changes to the "lin_user_identiy" edge.
func (m *LinUserMutation) ResetLinUserIdentiy() {
	m.lin_user_identiy = nil
	m.clearedlin_user_identiy = false
	m.removedlin_user_identiy = nil
}

// AddLinGroupIDs adds the "lin_group" edge to the LinGroup entity by ids.
func (m *LinUserMutation) AddLinGroupIDs(ids ...int) {
	if m.lin_group == nil {
		m.lin_group = make(map[int]struct{})
	}
	for i := range ids {
		m.lin_group[ids[i]] = struct{}{}
	}
}

// ClearLinGroup clears the "lin_group" edge to the LinGroup entity.
func (m *LinUserMutation) ClearLinGroup() {
	m.clearedlin_group = true
}

// LinGroupCleared reports if the "lin_group" edge to the LinGroup entity was cleared.
func (m *LinUserMutation) LinGroupCleared() bool {
	return m.clearedlin_group
}

// RemoveLinGroupIDs removes the "lin_group" edge to the LinGroup entity by IDs.
func (m *LinUserMutation) RemoveLinGroupIDs(ids ...int) {
	if m.removedlin_group == nil {
		m.removedlin_group = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lin_group, ids[i])
		m.removedlin_group[ids[i]] = struct{}{}
	}
}

// RemovedLinGroup returns the removed IDs of the "lin_group" edge to the LinGroup entity.
func (m *LinUserMutation) RemovedLinGroupIDs() (ids []int) {
	for id := range m.removedlin_group {
		ids = append(ids, id)
	}
	return
}

// LinGroupIDs returns the "lin_group" edge IDs in the mutation.
func (m *LinUserMutation) LinGroupIDs() (ids []int) {
	for id := range m.lin_group {
		ids = append(ids, id)
	}
	return
}

// ResetLinGroup resets all changes to the "lin_group" edge.
func (m *LinUserMutation) ResetLinGroup() {
	m.lin_group = nil
	m.clearedlin_group = false
	m.removedlin_group = nil
}

// Where appends a list predicates to the LinUserMutation builder.
func (m *LinUserMutation) Where(ps ...predicate.LinUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinUser).
func (m *LinUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, linuser.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, linuser.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, linuser.FieldDeleteTime)
	}
	if m.username != nil {
		fields = append(fields, linuser.FieldUsername)
	}
	if m.nickname != nil {
		fields = append(fields, linuser.FieldNickname)
	}
	if m.avatar != nil {
		fields = append(fields, linuser.FieldAvatar)
	}
	if m.email != nil {
		fields = append(fields, linuser.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linuser.FieldCreateTime:
		return m.CreateTime()
	case linuser.FieldUpdateTime:
		return m.UpdateTime()
	case linuser.FieldDeleteTime:
		return m.DeleteTime()
	case linuser.FieldUsername:
		return m.Username()
	case linuser.FieldNickname:
		return m.Nickname()
	case linuser.FieldAvatar:
		return m.Avatar()
	case linuser.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linuser.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case linuser.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case linuser.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case linuser.FieldUsername:
		return m.OldUsername(ctx)
	case linuser.FieldNickname:
		return m.OldNickname(ctx)
	case linuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case linuser.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown LinUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linuser.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case linuser.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case linuser.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case linuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case linuser.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case linuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case linuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown LinUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LinUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinUserMutation) ResetField(name string) error {
	switch name {
	case linuser.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case linuser.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case linuser.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case linuser.FieldUsername:
		m.ResetUsername()
		return nil
	case linuser.FieldNickname:
		m.ResetNickname()
		return nil
	case linuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case linuser.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown LinUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lin_user_identiy != nil {
		edges = append(edges, linuser.EdgeLinUserIdentiy)
	}
	if m.lin_group != nil {
		edges = append(edges, linuser.EdgeLinGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case linuser.EdgeLinUserIdentiy:
		ids := make([]ent.Value, 0, len(m.lin_user_identiy))
		for id := range m.lin_user_identiy {
			ids = append(ids, id)
		}
		return ids
	case linuser.EdgeLinGroup:
		ids := make([]ent.Value, 0, len(m.lin_group))
		for id := range m.lin_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlin_user_identiy != nil {
		edges = append(edges, linuser.EdgeLinUserIdentiy)
	}
	if m.removedlin_group != nil {
		edges = append(edges, linuser.EdgeLinGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case linuser.EdgeLinUserIdentiy:
		ids := make([]ent.Value, 0, len(m.removedlin_user_identiy))
		for id := range m.removedlin_user_identiy {
			ids = append(ids, id)
		}
		return ids
	case linuser.EdgeLinGroup:
		ids := make([]ent.Value, 0, len(m.removedlin_group))
		for id := range m.removedlin_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlin_user_identiy {
		edges = append(edges, linuser.EdgeLinUserIdentiy)
	}
	if m.clearedlin_group {
		edges = append(edges, linuser.EdgeLinGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinUserMutation) EdgeCleared(name string) bool {
	switch name {
	case linuser.EdgeLinUserIdentiy:
		return m.clearedlin_user_identiy
	case linuser.EdgeLinGroup:
		return m.clearedlin_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown LinUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinUserMutation) ResetEdge(name string) error {
	switch name {
	case linuser.EdgeLinUserIdentiy:
		m.ResetLinUserIdentiy()
		return nil
	case linuser.EdgeLinGroup:
		m.ResetLinGroup()
		return nil
	}
	return fmt.Errorf("unknown LinUser edge %s", name)
}

// LinUserIdentiyMutation represents an operation that mutates the LinUserIdentiy nodes in the graph.
type LinUserIdentiyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *int
	adduser_id    *int
	identity_type *string
	identifier    *string
	credential    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LinUserIdentiy, error)
	predicates    []predicate.LinUserIdentiy
}

var _ ent.Mutation = (*LinUserIdentiyMutation)(nil)

// linuseridentiyOption allows management of the mutation configuration using functional options.
type linuseridentiyOption func(*LinUserIdentiyMutation)

// newLinUserIdentiyMutation creates new mutation for the LinUserIdentiy entity.
func newLinUserIdentiyMutation(c config, op Op, opts ...linuseridentiyOption) *LinUserIdentiyMutation {
	m := &LinUserIdentiyMutation{
		config:        c,
		op:            op,
		typ:           TypeLinUserIdentiy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinUserIdentiyID sets the ID field of the mutation.
func withLinUserIdentiyID(id int) linuseridentiyOption {
	return func(m *LinUserIdentiyMutation) {
		var (
			err   error
			once  sync.Once
			value *LinUserIdentiy
		)
		m.oldValue = func(ctx context.Context) (*LinUserIdentiy, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LinUserIdentiy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLinUserIdentiy sets the old LinUserIdentiy of the mutation.
func withLinUserIdentiy(node *LinUserIdentiy) linuseridentiyOption {
	return func(m *LinUserIdentiyMutation) {
		m.oldValue = func(context.Context) (*LinUserIdentiy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinUserIdentiyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinUserIdentiyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinUserIdentiyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *LinUserIdentiyMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LinUserIdentiyMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the LinUserIdentiy entity.
// If the LinUserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserIdentiyMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *LinUserIdentiyMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *LinUserIdentiyMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LinUserIdentiyMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetIdentityType sets the "identity_type" field.
func (m *LinUserIdentiyMutation) SetIdentityType(s string) {
	m.identity_type = &s
}

// IdentityType returns the value of the "identity_type" field in the mutation.
func (m *LinUserIdentiyMutation) IdentityType() (r string, exists bool) {
	v := m.identity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityType returns the old "identity_type" field's value of the LinUserIdentiy entity.
// If the LinUserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserIdentiyMutation) OldIdentityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityType: %w", err)
	}
	return oldValue.IdentityType, nil
}

// ResetIdentityType resets all changes to the "identity_type" field.
func (m *LinUserIdentiyMutation) ResetIdentityType() {
	m.identity_type = nil
}

// SetIdentifier sets the "identifier" field.
func (m *LinUserIdentiyMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *LinUserIdentiyMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the LinUserIdentiy entity.
// If the LinUserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserIdentiyMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *LinUserIdentiyMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetCredential sets the "credential" field.
func (m *LinUserIdentiyMutation) SetCredential(s string) {
	m.credential = &s
}

// Credential returns the value of the "credential" field in the mutation.
func (m *LinUserIdentiyMutation) Credential() (r string, exists bool) {
	v := m.credential
	if v == nil {
		return
	}
	return *v, true
}

// OldCredential returns the old "credential" field's value of the LinUserIdentiy entity.
// If the LinUserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinUserIdentiyMutation) OldCredential(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCredential is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCredential requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredential: %w", err)
	}
	return oldValue.Credential, nil
}

// ResetCredential resets all changes to the "credential" field.
func (m *LinUserIdentiyMutation) ResetCredential() {
	m.credential = nil
}

// Where appends a list predicates to the LinUserIdentiyMutation builder.
func (m *LinUserIdentiyMutation) Where(ps ...predicate.LinUserIdentiy) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LinUserIdentiyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LinUserIdentiy).
func (m *LinUserIdentiyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinUserIdentiyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, linuseridentiy.FieldUserID)
	}
	if m.identity_type != nil {
		fields = append(fields, linuseridentiy.FieldIdentityType)
	}
	if m.identifier != nil {
		fields = append(fields, linuseridentiy.FieldIdentifier)
	}
	if m.credential != nil {
		fields = append(fields, linuseridentiy.FieldCredential)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinUserIdentiyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case linuseridentiy.FieldUserID:
		return m.UserID()
	case linuseridentiy.FieldIdentityType:
		return m.IdentityType()
	case linuseridentiy.FieldIdentifier:
		return m.Identifier()
	case linuseridentiy.FieldCredential:
		return m.Credential()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinUserIdentiyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case linuseridentiy.FieldUserID:
		return m.OldUserID(ctx)
	case linuseridentiy.FieldIdentityType:
		return m.OldIdentityType(ctx)
	case linuseridentiy.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case linuseridentiy.FieldCredential:
		return m.OldCredential(ctx)
	}
	return nil, fmt.Errorf("unknown LinUserIdentiy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinUserIdentiyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case linuseridentiy.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case linuseridentiy.FieldIdentityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityType(v)
		return nil
	case linuseridentiy.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case linuseridentiy.FieldCredential:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredential(v)
		return nil
	}
	return fmt.Errorf("unknown LinUserIdentiy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinUserIdentiyMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, linuseridentiy.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinUserIdentiyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case linuseridentiy.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinUserIdentiyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case linuseridentiy.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown LinUserIdentiy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinUserIdentiyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinUserIdentiyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinUserIdentiyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LinUserIdentiy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinUserIdentiyMutation) ResetField(name string) error {
	switch name {
	case linuseridentiy.FieldUserID:
		m.ResetUserID()
		return nil
	case linuseridentiy.FieldIdentityType:
		m.ResetIdentityType()
		return nil
	case linuseridentiy.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case linuseridentiy.FieldCredential:
		m.ResetCredential()
		return nil
	}
	return fmt.Errorf("unknown LinUserIdentiy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinUserIdentiyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinUserIdentiyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinUserIdentiyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinUserIdentiyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinUserIdentiyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinUserIdentiyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinUserIdentiyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LinUserIdentiy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinUserIdentiyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LinUserIdentiy edge %s", name)
}
