// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"lin-cms-go/internal/data/model/linfile"
	"lin-cms-go/internal/data/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinFileUpdate is the builder for updating LinFile entities.
type LinFileUpdate struct {
	config
	hooks    []Hook
	mutation *LinFileMutation
}

// Where appends a list predicates to the LinFileUpdate builder.
func (lfu *LinFileUpdate) Where(ps ...predicate.LinFile) *LinFileUpdate {
	lfu.mutation.Where(ps...)
	return lfu
}

// SetPath sets the "path" field.
func (lfu *LinFileUpdate) SetPath(s string) *LinFileUpdate {
	lfu.mutation.SetPath(s)
	return lfu
}

// SetType sets the "type" field.
func (lfu *LinFileUpdate) SetType(i int8) *LinFileUpdate {
	lfu.mutation.ResetType()
	lfu.mutation.SetType(i)
	return lfu
}

// AddType adds i to the "type" field.
func (lfu *LinFileUpdate) AddType(i int8) *LinFileUpdate {
	lfu.mutation.AddType(i)
	return lfu
}

// SetName sets the "name" field.
func (lfu *LinFileUpdate) SetName(s string) *LinFileUpdate {
	lfu.mutation.SetName(s)
	return lfu
}

// SetExtension sets the "extension" field.
func (lfu *LinFileUpdate) SetExtension(s string) *LinFileUpdate {
	lfu.mutation.SetExtension(s)
	return lfu
}

// SetSize sets the "size" field.
func (lfu *LinFileUpdate) SetSize(i int) *LinFileUpdate {
	lfu.mutation.ResetSize()
	lfu.mutation.SetSize(i)
	return lfu
}

// AddSize adds i to the "size" field.
func (lfu *LinFileUpdate) AddSize(i int) *LinFileUpdate {
	lfu.mutation.AddSize(i)
	return lfu
}

// SetMd5 sets the "md5" field.
func (lfu *LinFileUpdate) SetMd5(s string) *LinFileUpdate {
	lfu.mutation.SetMd5(s)
	return lfu
}

// Mutation returns the LinFileMutation object of the builder.
func (lfu *LinFileUpdate) Mutation() *LinFileMutation {
	return lfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lfu *LinFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lfu.hooks) == 0 {
		affected, err = lfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lfu.mutation = mutation
			affected, err = lfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lfu.hooks) - 1; i >= 0; i-- {
			if lfu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lfu *LinFileUpdate) SaveX(ctx context.Context) int {
	affected, err := lfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lfu *LinFileUpdate) Exec(ctx context.Context) error {
	_, err := lfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfu *LinFileUpdate) ExecX(ctx context.Context) {
	if err := lfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lfu *LinFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linfile.Table,
			Columns: linfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linfile.FieldID,
			},
		},
	}
	if ps := lfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lfu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldPath,
		})
	}
	if value, ok := lfu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linfile.FieldType,
		})
	}
	if value, ok := lfu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linfile.FieldType,
		})
	}
	if value, ok := lfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldName,
		})
	}
	if value, ok := lfu.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldExtension,
		})
	}
	if value, ok := lfu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linfile.FieldSize,
		})
	}
	if value, ok := lfu.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linfile.FieldSize,
		})
	}
	if value, ok := lfu.mutation.Md5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldMd5,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LinFileUpdateOne is the builder for updating a single LinFile entity.
type LinFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinFileMutation
}

// SetPath sets the "path" field.
func (lfuo *LinFileUpdateOne) SetPath(s string) *LinFileUpdateOne {
	lfuo.mutation.SetPath(s)
	return lfuo
}

// SetType sets the "type" field.
func (lfuo *LinFileUpdateOne) SetType(i int8) *LinFileUpdateOne {
	lfuo.mutation.ResetType()
	lfuo.mutation.SetType(i)
	return lfuo
}

// AddType adds i to the "type" field.
func (lfuo *LinFileUpdateOne) AddType(i int8) *LinFileUpdateOne {
	lfuo.mutation.AddType(i)
	return lfuo
}

// SetName sets the "name" field.
func (lfuo *LinFileUpdateOne) SetName(s string) *LinFileUpdateOne {
	lfuo.mutation.SetName(s)
	return lfuo
}

// SetExtension sets the "extension" field.
func (lfuo *LinFileUpdateOne) SetExtension(s string) *LinFileUpdateOne {
	lfuo.mutation.SetExtension(s)
	return lfuo
}

// SetSize sets the "size" field.
func (lfuo *LinFileUpdateOne) SetSize(i int) *LinFileUpdateOne {
	lfuo.mutation.ResetSize()
	lfuo.mutation.SetSize(i)
	return lfuo
}

// AddSize adds i to the "size" field.
func (lfuo *LinFileUpdateOne) AddSize(i int) *LinFileUpdateOne {
	lfuo.mutation.AddSize(i)
	return lfuo
}

// SetMd5 sets the "md5" field.
func (lfuo *LinFileUpdateOne) SetMd5(s string) *LinFileUpdateOne {
	lfuo.mutation.SetMd5(s)
	return lfuo
}

// Mutation returns the LinFileMutation object of the builder.
func (lfuo *LinFileUpdateOne) Mutation() *LinFileMutation {
	return lfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lfuo *LinFileUpdateOne) Select(field string, fields ...string) *LinFileUpdateOne {
	lfuo.fields = append([]string{field}, fields...)
	return lfuo
}

// Save executes the query and returns the updated LinFile entity.
func (lfuo *LinFileUpdateOne) Save(ctx context.Context) (*LinFile, error) {
	var (
		err  error
		node *LinFile
	)
	if len(lfuo.hooks) == 0 {
		node, err = lfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lfuo.mutation = mutation
			node, err = lfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lfuo.hooks) - 1; i >= 0; i-- {
			if lfuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lfuo *LinFileUpdateOne) SaveX(ctx context.Context) *LinFile {
	node, err := lfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lfuo *LinFileUpdateOne) Exec(ctx context.Context) error {
	_, err := lfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfuo *LinFileUpdateOne) ExecX(ctx context.Context) {
	if err := lfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lfuo *LinFileUpdateOne) sqlSave(ctx context.Context) (_node *LinFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   linfile.Table,
			Columns: linfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: linfile.FieldID,
			},
		},
	}
	id, ok := lfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LinFile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linfile.FieldID)
		for _, f := range fields {
			if !linfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != linfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lfuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldPath,
		})
	}
	if value, ok := lfuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linfile.FieldType,
		})
	}
	if value, ok := lfuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: linfile.FieldType,
		})
	}
	if value, ok := lfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldName,
		})
	}
	if value, ok := lfuo.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldExtension,
		})
	}
	if value, ok := lfuo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linfile.FieldSize,
		})
	}
	if value, ok := lfuo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: linfile.FieldSize,
		})
	}
	if value, ok := lfuo.mutation.Md5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: linfile.FieldMd5,
		})
	}
	_node = &LinFile{config: lfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
