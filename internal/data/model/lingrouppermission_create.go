// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"lin-cms-go/internal/data/model/lingrouppermission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinGroupPermissionCreate is the builder for creating a LinGroupPermission entity.
type LinGroupPermissionCreate struct {
	config
	mutation *LinGroupPermissionMutation
	hooks    []Hook
}

// SetGroupID sets the "group_id" field.
func (lgpc *LinGroupPermissionCreate) SetGroupID(i int) *LinGroupPermissionCreate {
	lgpc.mutation.SetGroupID(i)
	return lgpc
}

// SetPermissionID sets the "permission_id" field.
func (lgpc *LinGroupPermissionCreate) SetPermissionID(i int) *LinGroupPermissionCreate {
	lgpc.mutation.SetPermissionID(i)
	return lgpc
}

// Mutation returns the LinGroupPermissionMutation object of the builder.
func (lgpc *LinGroupPermissionCreate) Mutation() *LinGroupPermissionMutation {
	return lgpc.mutation
}

// Save creates the LinGroupPermission in the database.
func (lgpc *LinGroupPermissionCreate) Save(ctx context.Context) (*LinGroupPermission, error) {
	var (
		err  error
		node *LinGroupPermission
	)
	if len(lgpc.hooks) == 0 {
		if err = lgpc.check(); err != nil {
			return nil, err
		}
		node, err = lgpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinGroupPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lgpc.check(); err != nil {
				return nil, err
			}
			lgpc.mutation = mutation
			if node, err = lgpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lgpc.hooks) - 1; i >= 0; i-- {
			if lgpc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = lgpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lgpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lgpc *LinGroupPermissionCreate) SaveX(ctx context.Context) *LinGroupPermission {
	v, err := lgpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lgpc *LinGroupPermissionCreate) Exec(ctx context.Context) error {
	_, err := lgpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgpc *LinGroupPermissionCreate) ExecX(ctx context.Context) {
	if err := lgpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lgpc *LinGroupPermissionCreate) check() error {
	if _, ok := lgpc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`model: missing required field "group_id"`)}
	}
	if _, ok := lgpc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`model: missing required field "permission_id"`)}
	}
	return nil
}

func (lgpc *LinGroupPermissionCreate) sqlSave(ctx context.Context) (*LinGroupPermission, error) {
	_node, _spec := lgpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lgpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lgpc *LinGroupPermissionCreate) createSpec() (*LinGroupPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &LinGroupPermission{config: lgpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lingrouppermission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lingrouppermission.FieldID,
			},
		}
	)
	if value, ok := lgpc.mutation.GroupID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldGroupID,
		})
		_node.GroupID = value
	}
	if value, ok := lgpc.mutation.PermissionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lingrouppermission.FieldPermissionID,
		})
		_node.PermissionID = value
	}
	return _node, _spec
}

// LinGroupPermissionCreateBulk is the builder for creating many LinGroupPermission entities in bulk.
type LinGroupPermissionCreateBulk struct {
	config
	builders []*LinGroupPermissionCreate
}

// Save creates the LinGroupPermission entities in the database.
func (lgpcb *LinGroupPermissionCreateBulk) Save(ctx context.Context) ([]*LinGroupPermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lgpcb.builders))
	nodes := make([]*LinGroupPermission, len(lgpcb.builders))
	mutators := make([]Mutator, len(lgpcb.builders))
	for i := range lgpcb.builders {
		func(i int, root context.Context) {
			builder := lgpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinGroupPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lgpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lgpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lgpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lgpcb *LinGroupPermissionCreateBulk) SaveX(ctx context.Context) []*LinGroupPermission {
	v, err := lgpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lgpcb *LinGroupPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := lgpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgpcb *LinGroupPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := lgpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
