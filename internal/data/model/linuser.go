// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"lin-cms-go/internal/data/model/linuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// LinUser is the model entity for the LinUser schema.
type LinUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Username holds the value of the "username" field.
	// 用户名，唯一
	Username string `json:"username,omitempty"`
	// Nickname holds the value of the "nickname" field.
	// 用户昵称
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 头像url
	Avatar string `json:"avatar,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinUserQuery when eager-loading is set.
	Edges LinUserEdges `json:"edges"`
}

// LinUserEdges holds the relations/edges for other nodes in the graph.
type LinUserEdges struct {
	// LinUserIdentiy holds the value of the lin_user_identiy edge.
	LinUserIdentiy []*LinUserIdentiy `json:"lin_user_identiy,omitempty"`
	// LinGroup holds the value of the lin_group edge.
	LinGroup []*LinGroup `json:"lin_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LinUserIdentiyOrErr returns the LinUserIdentiy value or an error if the edge
// was not loaded in eager-loading.
func (e LinUserEdges) LinUserIdentiyOrErr() ([]*LinUserIdentiy, error) {
	if e.loadedTypes[0] {
		return e.LinUserIdentiy, nil
	}
	return nil, &NotLoadedError{edge: "lin_user_identiy"}
}

// LinGroupOrErr returns the LinGroup value or an error if the edge
// was not loaded in eager-loading.
func (e LinUserEdges) LinGroupOrErr() ([]*LinGroup, error) {
	if e.loadedTypes[1] {
		return e.LinGroup, nil
	}
	return nil, &NotLoadedError{edge: "lin_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case linuser.FieldID:
			values[i] = new(sql.NullInt64)
		case linuser.FieldUsername, linuser.FieldNickname, linuser.FieldAvatar, linuser.FieldEmail:
			values[i] = new(sql.NullString)
		case linuser.FieldCreateTime, linuser.FieldUpdateTime, linuser.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LinUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinUser fields.
func (lu *LinUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lu.ID = int(value.Int64)
		case linuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				lu.CreateTime = value.Time
			}
		case linuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				lu.UpdateTime = value.Time
			}
		case linuser.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				lu.DeleteTime = value.Time
			}
		case linuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				lu.Username = value.String
			}
		case linuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				lu.Nickname = value.String
			}
		case linuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				lu.Avatar = value.String
			}
		case linuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				lu.Email = value.String
			}
		}
	}
	return nil
}

// QueryLinUserIdentiy queries the "lin_user_identiy" edge of the LinUser entity.
func (lu *LinUser) QueryLinUserIdentiy() *LinUserIdentiyQuery {
	return (&LinUserClient{config: lu.config}).QueryLinUserIdentiy(lu)
}

// QueryLinGroup queries the "lin_group" edge of the LinUser entity.
func (lu *LinUser) QueryLinGroup() *LinGroupQuery {
	return (&LinUserClient{config: lu.config}).QueryLinGroup(lu)
}

// Update returns a builder for updating this LinUser.
// Note that you need to call LinUser.Unwrap() before calling this method if this LinUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LinUser) Update() *LinUserUpdateOne {
	return (&LinUserClient{config: lu.config}).UpdateOne(lu)
}

// Unwrap unwraps the LinUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LinUser) Unwrap() *LinUser {
	tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("model: LinUser is not a transactional entity")
	}
	lu.config.driver = tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LinUser) String() string {
	var builder strings.Builder
	builder.WriteString("LinUser(")
	builder.WriteString(fmt.Sprintf("id=%v", lu.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(lu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(lu.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(lu.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(lu.Username)
	builder.WriteString(", nickname=")
	builder.WriteString(lu.Nickname)
	builder.WriteString(", avatar=")
	builder.WriteString(lu.Avatar)
	builder.WriteString(", email=")
	builder.WriteString(lu.Email)
	builder.WriteByte(')')
	return builder.String()
}

// LinUsers is a parsable slice of LinUser.
type LinUsers []*LinUser

func (lu LinUsers) config(cfg config) {
	for _i := range lu {
		lu[_i].config = cfg
	}
}
